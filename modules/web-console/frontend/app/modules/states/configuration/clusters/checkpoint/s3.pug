//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var credentialsModel = '$checkpointSPI.S3.awsCredentials'
-var clientCfgModel = '$checkpointSPI.S3.clientConfiguration'
-var checkpointS3 = '$checkpointSPI.kind === "S3"'
-var checkpointS3Path = checkpointS3 + ' && $checkpointSPI.S3.awsCredentials.kind === "Properties"'
-var checkpointS3Custom = checkpointS3 + ' && $checkpointSPI.S3.awsCredentials.kind === "Custom"'

-var clientRetryModel = clientCfgModel + '.retryPolicy'
-var checkpointS3DefaultMaxRetry = checkpointS3 + ' && ' + clientRetryModel + '.kind === "DefaultMaxRetries"'
-var checkpointS3DynamoDbMaxRetry = checkpointS3 + ' && ' + clientRetryModel + '.kind === "DynamoDBMaxRetries"'
-var checkpointS3CustomRetry = checkpointS3 + ' && ' + clientRetryModel + '.kind === "Custom"'

.pc-form-grid-col-60(ng-if-start='$checkpointSPI.kind === "S3"')
    +dropdown-required('AWS credentials:', '$checkpointSPI.S3.awsCredentials.kind', '"checkpointS3AwsCredentials"', 'true', checkpointS3, 'Custom', '[\
        {value: "Basic", label: "Basic"},\
        {value: "Properties", label: "Properties"},\
        {value: "Anonymous", label: "Anonymous"},\
        {value: "BasicSession", label: "Basic with session"},\
        {value: "Custom", label: "Custom"}\
    ]',
    'AWS credentials\
    <ul>\
        <li>Basic - Allows callers to pass in the AWS access key and secret access in the constructor</li>\
        <li>Properties - Reads in AWS access keys from a properties file</li>\
        <li>Anonymous - Allows use of "anonymous" credentials</li>\
        <li>Database - Session credentials with keys and session token</li>\
        <li>Custom - Custom AWS credentials provider</li>\
    </ul>')
.pc-form-group.pc-form-grid-row(ng-if=checkpointS3Path)
    .pc-form-grid-col-60
        +text('Path:', credentialsModel + '.Properties.path', '"checkpointS3PropertiesPath"', checkpointS3Path, 'Input properties file path',
        'The file from which to read the AWS credentials properties')
.pc-form-group.pc-form-grid-row(ng-if=checkpointS3Custom)
    .pc-form-grid-col-60
        +java-class('Class name:', credentialsModel + '.Custom.className', '"checkpointS3CustomClassName"', 'true', checkpointS3Custom,
        'Custom AWS credentials provider implementation class', checkpointS3Custom)
.pc-form-grid-col-60
    label Note, AWS credentials will be generated as stub
.pc-form-grid-col-60
    +text('Bucket name suffix:', '$checkpointSPI.S3.bucketNameSuffix', '"checkpointS3BucketNameSuffix"', 'false', 'default-bucket')
.pc-form-grid-col-60(ng-if-start=`$ctrl.available("2.4.0")`)
    +text('Bucket endpoint:', `$checkpointSPI.S3.bucketEndpoint`, '"checkpointS3BucketEndpoint"', false, 'Input bucket endpoint',
    'Bucket endpoint for IP finder<br/> \
    For information about possible endpoint names visit <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region">docs.aws.amazon.com</a>')
.pc-form-grid-col-60(ng-if-end)
    +text('SSE algorithm:', `$checkpointSPI.S3.SSEAlgorithm`, '"checkpointS3SseAlgorithm"', false, 'Input SSE algorithm',
    'Server-side encryption algorithm for Amazon S3-managed encryption keys<br/> \
    For information about possible S3-managed encryption keys visit <a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html">docs.aws.amazon.com</a>')
.pc-form-grid-col-60
    +java-class('Listener:', '$checkpointSPI.S3.checkpointListener', '"checkpointS3Listener"', 'true', 'false',
        'Checkpoint listener implementation class name', checkpointS3)
.pc-form-grid-col-60.pc-form-group__text-title
    span Client configuration
.pc-form-group.pc-form-grid-row(ng-if-end)
    .pc-form-grid-col-30
        +dropdown('Protocol:', clientCfgModel + '.protocol', '"checkpointS3Protocol"', 'true', 'HTTPS', '[\
                {value: "HTTP", label: "HTTP"},\
                {value: "HTTPS", label: "HTTPS"}\
            ]',
        'Provides an ability to save an intermediate job state\
        <ul>\
            <li>HTTP - Using the HTTP protocol is less secure than HTTPS, but can slightly reduce\
                the system resources used when communicating with AWS</li>\
            <li>HTTPS - Using the HTTPS protocol is more secure than using the HTTP protocol, but\
                may use slightly more system resources. AWS recommends using HTTPS for maximize security</li>\
        </ul>')
    .pc-form-grid-col-30
        +number('Maximum connections:', clientCfgModel + '.maxConnections', '"checkpointS3MaxConnections"',
        'true', '50', '1', 'Maximum number of allowed open HTTP connections')
    .pc-form-grid-col-60
        +text('User agent prefix:', clientCfgModel + '.userAgentPrefix', '"checkpointS3UserAgentPrefix"', 'false', 'System specific header',
        'HTTP user agent prefix to send with all requests')
    .pc-form-grid-col-60
        +text('User agent suffix:', clientCfgModel + '.userAgentSuffix', '"checkpointS3UserAgentSuffix"', 'false', 'System specific header',
        'HTTP user agent suffix to send with all requests')
    .pc-form-grid-col-60
        +text-ip-address('Local address:', clientCfgModel + '.localAddress', '"checkpointS3LocalAddress"', 'true', 'Not specified',
        'Optionally specifies the local address to bind to')
    .pc-form-grid-col-40
        +text('Proxy host:', clientCfgModel + '.proxyHost', '"checkpointS3ProxyHost"', 'false', 'Not specified',
        'Optional proxy host the client will connect through')
    .pc-form-grid-col-20
        +number('Proxy port:', clientCfgModel + '.proxyPort', '"checkpointS3ProxyPort"', 'true', 'Not specified', '0',
        'Optional proxy port the client will connect through')
    .pc-form-grid-col-30
        +text('Proxy user:', clientCfgModel + '.proxyUsername', '"checkpointS3ProxyUsername"', 'false', 'Not specified',
        'Optional proxy user name to use if connecting through a proxy')
    .pc-form-grid-col-30
        +text('Proxy domain:', clientCfgModel + '.proxyDomain', '"checkpointS3ProxyDomain"', 'false', 'Not specified',
        'Optional Windows domain name for configuring an NTLM proxy')
    .pc-form-grid-col-60
        +text('Proxy workstation:', clientCfgModel + '.proxyWorkstation', '"checkpointS3ProxyWorkstation"', 'false', 'Not specified',
        'Optional Windows workstation name for configuring NTLM proxy support')
    .pc-form-grid-col-60
        +text('Non proxy hosts:', clientCfgModel + '.nonProxyHosts', '"checkpointS3NonProxyHosts"', 'false', 'Not specified',
        'Optional hosts the client will access without going through the proxy')
    .pc-form-grid-col-60
        +dropdown('Retry policy:', clientRetryModel + '.kind', '"checkpointS3RetryPolicy"', 'true', 'Default', '[\
                                            {value: "Default", label: "Default SDK retry policy"},\
                                            {value: "DefaultMaxRetries", label: "Default with the specified max retry count"},\
                                            {value: "DynamoDB", label: "Default for DynamoDB client"},\
                                            {value: "DynamoDBMaxRetries", label: "DynamoDB with the specified max retry count"},\
                                            {value: "Custom", label: "Custom configured"}\
                                        ]',
        'Provides an ability to save an intermediate job state\
        <ul>\
            <li>SDK default retry policy - This policy will honor the maxErrorRetry set in ClientConfiguration</li>\
            <li>Default with the specified max retry count - Default SDK retry policy with the specified max retry count</li>\
            <li>Default for DynamoDB client - This policy will honor the maxErrorRetry set in ClientConfiguration</li>\
            <li>DynamoDB with the specified max retry count - This policy will honor the maxErrorRetry set in ClientConfiguration with the specified max retry count</li>\
            <li>Custom configured - Custom configured SDK retry policy</li>\
        </ul>')
    .pc-form-group.pc-form-grid-row(ng-if=checkpointS3DefaultMaxRetry)
        .pc-form-grid-col-60
            +number-required('Maximum retry attempts:', clientRetryModel + '.DefaultMaxRetries.maxErrorRetry', '"checkpointS3DefaultMaxErrorRetry"', 'true', checkpointS3DefaultMaxRetry, '-1', '1',
            'Maximum number of retry attempts for failed requests')
    .pc-form-group.pc-form-grid-row(ng-if=checkpointS3DynamoDbMaxRetry)
        .pc-form-grid-col-60
            +number-required('Maximum retry attempts:', clientRetryModel + '.DynamoDBMaxRetries.maxErrorRetry', '"checkpointS3DynamoDBMaxErrorRetry"', 'true', checkpointS3DynamoDbMaxRetry, '-1', '1',
            'Maximum number of retry attempts for failed requests')
    .pc-form-group.pc-form-grid-row(ng-if=checkpointS3CustomRetry)
        .pc-form-grid-col-60
            +java-class('Retry condition:', clientRetryModel + '.Custom.retryCondition', '"checkpointS3CustomRetryPolicy"', 'true', checkpointS3CustomRetry,
            'Retry condition on whether a specific request and exception should be retried', checkpointS3CustomRetry)
        .pc-form-grid-col-60
            +java-class('Backoff strategy:', clientRetryModel + '.Custom.backoffStrategy', '"checkpointS3CustomBackoffStrategy"', 'true', checkpointS3CustomRetry,
            'Back-off strategy for controlling how long the next retry should wait', checkpointS3CustomRetry)
        .pc-form-grid-col-60
            +number-required('Maximum retry attempts:', clientRetryModel + '.Custom.maxErrorRetry', '"checkpointS3CustomMaxErrorRetry"', 'true', checkpointS3CustomRetry, '-1', '1',
            'Maximum number of retry attempts for failed requests')
        .pc-form-grid-col-60
            +checkbox('Honor the max error retry set', clientRetryModel + '.Custom.honorMaxErrorRetryInClientConfig', '"checkpointS3CustomHonorMaxErrorRetryInClientConfig"',
            'Whether this retry policy should honor the max error retry set by ClientConfiguration#setMaxErrorRetry(int)')
    .pc-form-grid-col-60
        +number('Maximum retry attempts:', clientCfgModel + '.maxErrorRetry', '"checkpointS3MaxErrorRetry"', 'true', '-1', '0',
        'Maximum number of retry attempts for failed retryable requests<br/>\
        If -1 the configured RetryPolicy will be used to control the retry count')
    .pc-form-grid-col-30
        +number('Socket timeout:', clientCfgModel + '.socketTimeout', '"checkpointS3SocketTimeout"', 'true', '50000', '0',
        'Amount of time in milliseconds to wait for data to be transfered over an established, open connection before the connection times out and is closed<br/>\
        A value of <b>0</b> means infinity')
    .pc-form-grid-col-30
        +number('Connection timeout:', clientCfgModel + '.connectionTimeout', '"checkpointS3ConnectionTimeout"', 'true', '50000', '0',
        'Amount of time in milliseconds to wait when initially establishing a connection before giving up and timing out<br/>\
        A value of <b>0</b> means infinity')
    .pc-form-grid-col-30
        +number('Request timeout:', clientCfgModel + '.requestTimeout', '"checkpointS3RequestTimeout"', 'true', '0', '-1',
        'Amount of time in milliseconds to wait for the request to complete before giving up and timing out<br/>\
        A non - positive value means infinity')
    .pc-form-grid-col-30
        +number('Idle timeout:', clientCfgModel + '.connectionMaxIdleMillis', '"checkpointS3ConnectionMaxIdleMillis"', 'true', '60000', '0',
        'Maximum amount of time that an idle connection may sit in the connection pool and still be eligible for reuse')
    .pc-form-grid-col-30
        +text('Signature algorithm:', clientCfgModel + '.signerOverride', '"checkpointS3SignerOverride"', 'false', 'Not specified',
        'Name of the signature algorithm to use for signing requests made by this client')
    .pc-form-grid-col-30
        +number('Connection TTL:', clientCfgModel + '.connectionTTL', '"checkpointS3ConnectionTTL"', 'true', '-1', '-1',
        'Expiration time in milliseconds for a connection in the connection pool<br/>\
        By default, it is set to <b>-1</b>, i.e. connections do not expire')
    .pc-form-grid-col-60
        +java-class('DNS resolver:', clientCfgModel + '.dnsResolver', '"checkpointS3DnsResolver"', 'true', 'false',
        'DNS Resolver that should be used to for resolving AWS IP addresses', checkpointS3)
    .pc-form-grid-col-60
        +number('Response metadata cache size:', clientCfgModel + '.responseMetadataCacheSize', '"checkpointS3ResponseMetadataCacheSize"', 'true', '50', '0',
        'Response metadata cache size')
    .pc-form-grid-col-60
        +java-class('SecureRandom class name:', clientCfgModel + '.secureRandom', '"checkpointS3SecureRandom"', 'true', 'false',
        'SecureRandom to be used by the SDK class name', checkpointS3)
    .pc-form-grid-col-60
        +number('Client execution timeout:', clientCfgModel + '.clientExecutionTimeout', '"checkpointS3ClientExecutionTimeout"', 'true', '0', '0',
        'Amount of time in milliseconds to allow the client to complete the execution of an API call<br/>\
        <b>0</b> value disables that feature')
    .pc-form-grid-col-60
        +checkbox('Cache response metadata', clientCfgModel + '.cacheResponseMetadata', '"checkpointS3CacheResponseMetadata"', 'Cache response metadata')
    .pc-form-grid-col-60
        +checkbox('Use expect continue', clientCfgModel + '.useExpectContinue', '"checkpointS3UseExpectContinue"', 'Optional override to enable/disable support for HTTP/1.1 handshake utilizing EXPECT: 100-Continue')
    .pc-form-grid-col-60
        +checkbox('Use throttle retries', clientCfgModel + '.useThrottleRetries', '"checkpointS3UseThrottleRetries"', 'Retry throttling will be used')
    .pc-form-grid-col-60
        +checkbox('Use reaper', clientCfgModel + '.useReaper', '"checkpointS3UseReaper"', 'Checks if the IdleConnectionReaper is to be started')
    .pc-form-grid-col-60
        +checkbox('Use GZIP', clientCfgModel + '.useGzip', '"checkpointS3UseGzip"', 'Checks if gzip compression is used')
    .pc-form-grid-col-60
        +checkbox('Preemptively basic authentication', clientCfgModel + '.preemptiveBasicProxyAuth', '"checkpointS3PreemptiveBasicProxyAuth"',
        'Attempt to authenticate preemptively against proxy servers using basic authentication')
    .pc-form-grid-col-60
        +checkbox('TCP KeepAlive', clientCfgModel + '.useTcpKeepAlive', '"checkpointS3UseTcpKeepAlive"', 'TCP KeepAlive support is enabled')
