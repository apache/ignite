//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var form = 'atomics'
-var model = '$ctrl.clonedCluster.atomicConfiguration'
-var affModel = model + '.affinity'
-var rendezvousAff = affModel + '.kind === "Rendezvous"'
-var customAff = affModel + '.kind === "Custom"'

panel-collapsible(ng-form=form on-open=`ui.loadPanel('${form}')`)
    panel-title Atomic configuration
    panel-description
        | Configuration for atomic data structures.
        | Atomics are distributed across the cluster, essentially enabling performing atomic operations (such as increment-and-get or compare-and-set) with the same globally-visible value. 
        | #[a.link-success(href="https://apacheignite.readme.io/docs/atomic-types" target="_blank") More info]
    panel-content.pca-form-row(ng-if=`ui.isPanelLoaded('${form}')`)
        .pca-form-column-6.pc-form-grid-row
            .pc-form-grid-col-30
                +dropdown('Cache mode:', `${model}.cacheMode`, '"cacheMode"', 'true', 'PARTITIONED',
                    '[\
                        {value: "LOCAL", label: "LOCAL"},\
                        {value: "REPLICATED", label: "REPLICATED"},\
                        {value: "PARTITIONED", label: "PARTITIONED"}\
                    ]',
                    'Cache modes:\
                    <ul>\
                        <li>Partitioned - in this mode the overall key set will be divided into partitions and all partitions will be split equally between participating nodes</li>\
                        <li>Replicated - in this mode all the keys are distributed to all participating nodes</li>\
                        <li>Local - in this mode caches residing on different grid nodes will not know about each other</li>\
                    </ul>')
            .pc-form-grid-col-30
                +number('Sequence reserve:', `${model}.atomicSequenceReserveSize`, '"atomicSequenceReserveSize"', 'true', '1000', '0',
                    'Default number of sequence values reserved for IgniteAtomicSequence instances<br/>\
                    After a certain number has been reserved, consequent increments of sequence will happen locally, without communication with other nodes, until the next reservation has to be made')
            .pc-form-grid-col-60(ng-show=`!(${model}.cacheMode && ${model}.cacheMode != "PARTITIONED")`)
                +number('Backups:', model + '.backups', '"backups"', 'true', '0', '0', 'Number of backup nodes')

            .pc-form-grid-col-60(ng-if-start='$ctrl.available("2.1.0")')
                +dropdown('Function:', `${affModel}.kind`, '"AffinityKind"', 'true', 'Default', '$ctrl.Clusters.affinityFunctions',
                    'Key topology resolver to provide mapping from keys to nodes\
                    <ul>\
                        <li>Rendezvous - Based on Highest Random Weight algorithm<br/></li>\
                        <li>Custom - Custom implementation of key affinity function<br/></li>\
                        <li>Default - By default rendezvous affinity function  with 1024 partitions is used<br/></li>\
                    </ul>')
            .pc-form-group(ng-if-end ng-if=rendezvousAff + ' || ' + customAff)
                .pc-form-grid-row
                    .pc-form-grid-col-30(ng-if-start=rendezvousAff)
                        +number-required('Partitions', `${affModel}.Rendezvous.partitions`, '"RendPartitions"', 'true', rendPartitionsRequired, '1024', '1', 'Number of partitions')
                    .pc-form-grid-col-30
                        +java-class('Backup filter', `${affModel}.Rendezvous.affinityBackupFilter`, '"RendAffinityBackupFilter"', 'true', 'false',
                            'Backups will be selected from all nodes that pass this filter')
                    .pc-form-grid-col-60(ng-if-end)
                        +checkbox('Exclude neighbors', `${affModel}.Rendezvous.excludeNeighbors`, '"RendExcludeNeighbors"',
                            'Exclude same - host - neighbors from being backups of each other and specified number of backups')
                    .pc-form-grid-col-60(ng-if=customAff)
                        +java-class('Class name:', `${affModel}.Custom.className`, '"AffCustomClassName"', 'true', customAff,
                            'Custom key affinity function implementation class name')
        .pca-form-column-6
            +preview-xml-java(model, 'clusterAtomics')
