//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var form = 'memory'
-var model = 'backupItem'

.panel.panel-default(ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle='' ng-click=`ui.loadPanel('${form}')`)
        ignite-form-panel-chevron
        label Memory
        ignite-form-field-tooltip.tipLabel
            | Cache memory settings#[br]
            | #[a(href="https://apacheignite.readme.io/docs/off-heap-memory" target="_blank") More info]
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=`${form}`)
        .panel-body(ng-if=`ui.isPanelLoaded('${form}')`)
            .col-sm-6
                .settings-row
                    +checkbox('On-heap cache enabled', `${model}.onheapCacheEnabled`, '"onheapCacheEnabled"', 'On-heap cache enabled flag')
                .settings-row(ng-show=`${model}.onheapCacheEnabled`)
                    +evictionPolicy(`${model}.evictionPolicy`, '"evictionPolicy"', 'true', 'false',
                        'Cache eviction policy<br/>\
                        Must be set for entries to be evicted to off-heap\
                        <ul>\
                            <li>Least Recently Used(LRU) - Eviction policy based on LRU algorithm and supports batch eviction</li>\
                            <li>First In First Out (FIFO) - Eviction policy based on FIFO algorithm and supports batch eviction</li>\
                            <li>SORTED - Eviction policy which will select the minimum cache entry for eviction</li>\
                        </ul>')
                .settings-row
                    +number('Start size:', `${model}.startSize`, '"startSize"', 'true', '1500000', '0',
                        'In terms of size and capacity, Ignite internal cache map acts exactly like a normal Java HashMap: it has some initial capacity\
                        (which is pretty small by default), which doubles as data arrives. The process of internal cache map resizing is CPU-intensive\
                        and time-consuming, and if you load a huge dataset into cache (which is a normal use case), the map will have to resize a lot of times.\
                        To avoid that, you can specify the initial cache map capacity, comparable to the expected size of your dataset.\
                        This will save a lot of CPU resources during the load time, because the map would not have to resize.\
                        For example, if you expect to load 10 million entries into cache, you can set this property to 10 000 000.\
                        This will save you from cache internal map resizes.')
            .col-sm-6
                +preview-xml-java(model, 'cacheMemory')
