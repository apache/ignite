//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var form = 'store'
-var model = 'backupItem'

mixin hibernateField(name, model, items, valid, save, newItem)
    -var resetOnEnter = newItem ? '(stopblur = true) && (group.add = [{}])' : '(field.edit = false)'
    -var onEnter = `${valid} && (${save}); ${valid} && ${resetOnEnter};`

    -var onEscape = newItem ? 'group.add = []' : 'field.edit = false'

    -var resetOnBlur = newItem ? '!stopblur && (group.add = [])' : 'field.edit = false'
    -var onBlur = `${valid} && (${save}); ${resetOnBlur};`

    div(ignite-on-focus-out=onBlur)
        if block
            block

        .input-tip
            +ignite-form-field-input(name, model, false, 'true', 'key=value')(
                data-ignite-property-unique=items
                data-ignite-property-value-specified
                data-ignite-form-field-input-autofocus='true'

                ignite-on-enter=onEnter
                ignite-on-escape=onEscape
            )

.panel.panel-default(ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle='' ng-click=`ui.loadPanel('${form}')`)
        ignite-form-panel-chevron
        label Store
        ignite-form-field-tooltip.tipLabel
            | Cache store settings#[br]
            | #[a(href="https://apacheignite.readme.io/docs/persistent-store" target="_blank") More info]
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=`${form}`)
        .panel-body(ng-if=`ui.isPanelLoaded('${form}')`)
            .col-sm-6
                .settings-row
                    -var storeFactory = `${model}.cacheStoreFactory`;
                    -var storeFactoryKind = `${storeFactory}.kind`;

                    +dropdown('Store factory:', storeFactoryKind, '"cacheStoreFactory"', 'true', 'Not set',
                        '[\
                            {value: "CacheJdbcPojoStoreFactory", label: "JDBC POJO store factory"},\
                            {value: "CacheJdbcBlobStoreFactory", label: "JDBC BLOB store factory"},\
                            {value: "CacheHibernateBlobStoreFactory", label: "Hibernate BLOB store factory"},\
                            {value: undefined, label: "Not set"}\
                        ]',
                        'Factory for persistent storage for cache data\
                        <ul>\
                            <li>JDBC POJO store factory - Objects are stored in underlying database by using java beans mapping description via reflection backed by JDBC</li>\
                            <li>JDBC BLOB store factory - Objects are stored in underlying database in BLOB format backed by JDBC</li>\
                            <li>Hibernate BLOB store factory - Objects are stored in underlying database in BLOB format backed by Hibernate</li>\
                        </ul>'
                    )
                    span(ng-show=storeFactoryKind ng-init='__.expanded = true')
                        a.customize(ng-show='__.expanded' ng-click='__.expanded = false') Hide settings
                        a.customize(ng-hide='__.expanded' ng-click='__.expanded = true') Show settings
                        .panel-details(ng-show='__.expanded')
                            div(ng-show=`${storeFactoryKind} === 'CacheJdbcPojoStoreFactory'`)
                                -var pojoStoreFactory = `${storeFactory}.CacheJdbcPojoStoreFactory`
                                -var required = `${storeFactoryKind} === 'CacheJdbcPojoStoreFactory'`

                                .details-row
                                    +text('Data source bean name:', `${pojoStoreFactory}.dataSourceBean`,
                                        '"pojoDataSourceBean"', required, 'Input bean name',
                                        'Name of the data source bean in Spring context')
                                .details-row
                                    +dialect('Dialect:', `${pojoStoreFactory}.dialect`, '"pojoDialect"', required,
                                        'Dialect of SQL implemented by a particular RDBMS:', 'Generic JDBC dialect',
                                        'Choose JDBC dialect')
                                .details-row
                                    +number('Batch size:', `${pojoStoreFactory}.batchSize`, '"pojoBatchSize"', true, '512', '1',
                                        'Maximum batch size for writeAll and deleteAll operations')
                                .details-row
                                    +number('Thread count:', `${pojoStoreFactory}.maximumPoolSize`, '"pojoMaximumPoolSize"', true, 'availableProcessors', '1',
                                        'Maximum workers thread count.<br/>\
                                        These threads are responsible for load cache.')
                                .details-row
                                    +number('Maximum write attempts:', `${pojoStoreFactory}.maximumWriteAttempts`, '"pojoMaximumWriteAttempts"', true, '2', '0',
                                        'Maximum write attempts in case of database error')
                                .details-row
                                    +number('Parallel load threshold:', `${pojoStoreFactory}.parallelLoadCacheMinimumThreshold`, '"pojoParallelLoadCacheMinimumThreshold"', true, '512', '0',
                                        'Parallel load cache minimum threshold.<br/>\
                                        If <b>0</b> then load sequentially.')
                                .details-row
                                    +java-class('Hasher', `${pojoStoreFactory}.hasher`, '"pojoHasher"', 'true', 'false', 'Hash calculator', required)
                                .details-row
                                    +java-class('Transformer', `${pojoStoreFactory}.transformer`, '"pojoTransformer"', 'true', 'false', 'Types transformer', required)
                                .details-row
                                    +checkbox('Escape table and filed names', `${pojoStoreFactory}.sqlEscapeAll`, '"sqlEscapeAll"',
                                        'If enabled than all schema, table and field names will be escaped with double quotes (for example: "tableName"."fieldName").<br/>\
                                        This enforces case sensitivity for field names and also allows having special characters in table and field names.<br/>\
                                        Escaped names will be used for CacheJdbcPojoStore internal SQL queries.')
                            div(ng-show=`${storeFactoryKind} === 'CacheJdbcBlobStoreFactory'`)
                                -var blobStoreFactory = `${storeFactory}.CacheJdbcBlobStoreFactory`
                                -var blobStoreFactoryVia = `${blobStoreFactory}.connectVia`

                                .details-row
                                    +dropdown('Connect via:', blobStoreFactoryVia, '"connectVia"', 'true', 'Choose connection method',
                                        '[\
                                            {value: "URL", label: "URL"},\
                                            {value: "DataSource", label: "Data source"}\
                                        ]',
                                        'You can connect to database via:\
                                        <ul>\
                                            <li>JDBC URL, for example: jdbc:h2:mem:myDatabase</li>\
                                            <li>Configured data source</li>\
                                        </ul>')
                                div(ng-show=`${blobStoreFactoryVia} === 'URL'`)
                                    -var required = `${storeFactoryKind} === 'CacheJdbcBlobStoreFactory' && ${blobStoreFactoryVia} === 'URL'`

                                    .details-row
                                        +text('Connection URL:', `${blobStoreFactory}.connectionUrl`, '"connectionUrl"', required, 'Input URL',
                                            'URL for database access, for example: jdbc:h2:mem:myDatabase')
                                    .details-row
                                        +text('User:', `${blobStoreFactory}.user`, '"user"', required, 'Input user name', 'User name for database access')
                                    .details-row
                                        label Note, password will be generated as stub
                                div(ng-show=`${blobStoreFactoryVia} !== 'URL'`)
                                    -var required = `${storeFactoryKind} === 'CacheJdbcBlobStoreFactory' && ${blobStoreFactoryVia} !== 'URL'`

                                    .details-row
                                        +text('Data source bean name:', `${blobStoreFactory}.dataSourceBean`, '"blobDataSourceBean"', required, 'Input bean name',
                                            'Name of the data source bean in Spring context')
                                    .details-row
                                        +dialect('Database:', `${blobStoreFactory}.dialect`, '"blobDialect"', required, 'Supported databases:', 'Generic database', 'Choose database')
                                .details-row
                                    +checkbox('Init schema', `${blobStoreFactory}.initSchema`, '"initSchema"',
                                        'Flag indicating whether DB schema should be initialized by Ignite (default behaviour) or was explicitly created by user')
                                .details-row
                                    +text('Create query:', `${blobStoreFactory}.createTableQuery`, '"createTableQuery"', 'false', 'SQL for table creation',
                                        'Query for table creation in underlying database<br/>\
                                        Default value: create table if not exists ENTRIES (key binary primary key, val binary)')
                                .details-row
                                    +text('Load query:', `${blobStoreFactory}.loadQuery`, '"loadQuery"', 'false', 'SQL for load entry',
                                        'Query for entry load from underlying database<br/>\
                                        Default value: select * from ENTRIES where key=?')
                                .details-row
                                    +text('Insert query:', `${blobStoreFactory}.insertQuery`, '"insertQuery"', 'false', 'SQL for insert entry',
                                        'Query for insert entry into underlying database<br/>\
                                        Default value: insert into ENTRIES (key, val) values (?, ?)')
                                .details-row
                                    +text('Update query:', `${blobStoreFactory}.updateQuery`, '"updateQuery"', 'false', 'SQL for update entry',
                                        'Query for update entry in underlying database<br/>\
                                        Default value: update ENTRIES set val=? where key=?')
                                .details-row
                                    +text('Delete query:', `${blobStoreFactory}.deleteQuery`, '"deleteQuery"', 'false', 'SQL for delete entry',
                                        'Query for delete entry from underlying database<br/>\
                                        Default value: delete from ENTRIES where key=?')

                            div(ng-show=`${storeFactoryKind} === 'CacheHibernateBlobStoreFactory'`)
                                -var hibernateStoreFactory = `${storeFactory}.CacheHibernateBlobStoreFactory`
                                -var hibernateProperties = `${hibernateStoreFactory}.hibernateProperties`

                                .details-row
                                    +ignite-form-group(ng-form=form ng-model=hibernateProperties)
                                        ignite-form-field-label
                                            | Hibernate properties
                                        ignite-form-group-tooltip
                                            | List of Hibernate properties#[br]
                                            | For example: connection.url=jdbc:h2:mem:exampleDb
                                        ignite-form-group-add(ng-click='tableNewItem(hibernatePropsTbl)')
                                            | Add new Hibernate property

                                        -var tipUnique = 'Property with such key already exists!'
                                        -var tipPropertySpecified = 'Property should be present in format key=value!'

                                        .group-content-empty(ng-if=`!((${hibernateProperties} && ${hibernateProperties}.length > 0) || tableNewItemActive(hibernatePropsTbl))`)
                                            | Not defined
                                        .group-content(ng-show=`(${hibernateProperties} && ${hibernateProperties}.length > 0) || tableNewItemActive(hibernatePropsTbl)`)
                                            table.links-edit(id='hibernateProps' st-table=hibernateProperties)
                                                tbody
                                                    tr(ng-repeat=`item in ${hibernateProperties}`)
                                                        td.col-sm-12(ng-hide='tableEditing(hibernatePropsTbl, $index)')
                                                            a.labelFormField(ng-click='tableStartEdit(backupItem, hibernatePropsTbl, $index)') {{item.name}} = {{item.value}}
                                                            +btn-remove('tableRemove(backupItem, hibernatePropsTbl, $index)', '"Remove Property"')
                                                        td.col-sm-12(ng-if='tableEditing(hibernatePropsTbl, $index)')
                                                            +table-pair-edit('hibernatePropsTbl', 'cur', 'Property name', 'Property value', false, false, '{{::hibernatePropsTbl.focusId + $index}}', '$index', '=')
                                                tfoot(ng-show='tableNewItemActive(hibernatePropsTbl)')
                                                    tr
                                                        td.col-sm-12
                                                            +table-pair-edit('hibernatePropsTbl', 'new', 'Property name', 'Property value', false, false, '{{::hibernatePropsTbl.focusId + $index}}', '-1', '=')


                .settings-row
                    +checkbox('Keep binary in store', `${model}.storeKeepBinary`, '"storeKeepBinary"',
                        'Flag indicating that CacheStore implementation is working with binary objects instead of Java objects')
                .settings-row
                    +checkbox('Load previous value', `${model}.loadPreviousValue`, '"loadPreviousValue"',
                        'Flag indicating whether value should be loaded from store if it is not in the cache for following cache operations: \
                        <ul> \
                            <li>IgniteCache.putIfAbsent()</li> \
                            <li>IgniteCache.replace()</li> \
                            <li>IgniteCache.remove()</li> \
                            <li>IgniteCache.getAndPut()</li> \
                            <li>IgniteCache.getAndRemove()</li> \
                            <li>IgniteCache.getAndReplace()</li> \
                            <li> IgniteCache.getAndPutIfAbsent()</li>\
                        </ul>')
                .settings-row
                    +checkbox('Read-through', `${model}.readThrough`, '"readThrough"', 'Flag indicating whether read-through caching should be used')
                .settings-row
                    +checkbox('Write-through', `${model}.writeThrough`, '"writeThrough"', 'Flag indicating whether write-through caching should be used')
                .settings-row
                    +ignite-form-group
                        ignite-form-field-label
                            | Write-behind
                        ignite-form-group-tooltip
                            | Cache write-behind settings#[br]
                            | Write-behind is a special mode when updates to cache accumulated and then asynchronously flushed to persistent store as a bulk operation
                        .group-content
                            -var enabled = `${model}.writeBehindEnabled`

                            .details-row
                                +checkbox('Enabled', enabled, '"writeBehindEnabled"', 'Flag indicating whether Ignite should use write-behind behaviour for the cache store')
                            .details-row
                                +number('Batch size:', `${model}.writeBehindBatchSize`, '"writeBehindBatchSize"', enabled, '512', '1',
                                    'Maximum batch size for write-behind cache store operations<br/>\
                                     Store operations(get or remove) are combined in a batch of this size to be passed to cache store')
                            .details-row
                                +number('Flush size:', `${model}.writeBehindFlushSize`, '"writeBehindFlushSize"', enabled, '10240', '0',
                                    'Maximum size of the write-behind cache<br/>\
                                     If cache size exceeds this value, all cached items are flushed to the cache store and write cache is cleared')
                            .details-row
                                +number('Flush frequency:', `${model}.writeBehindFlushFrequency`, '"writeBehindFlushFrequency"', enabled, '5000', '0',
                                    'Frequency with which write-behind cache is flushed to the cache store in milliseconds')
                            .details-row
                                +number('Flush threads count:', `${model}.writeBehindFlushThreadCount`, '"writeBehindFlushThreadCount"', enabled, '1', '1',
                                    'Number of threads that will perform cache flushing')
            .col-sm-6
                +preview-xml-java(model, 'cacheStore', 'domains')
