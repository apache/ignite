//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include ../../../../../app/helpers/jade/mixins.jade

-var form = 'query'
-var model = 'backupItem'

.panel.panel-default(ng-form=form novalidate)
    .panel-heading(bs-collapse-toggle='' ng-click='ui.loadPanel("#{form}")')
        ignite-form-panel-chevron
        label Queries & Indexing
        ignite-form-field-tooltip.tipLabel
            | Cache queries settings
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=form)
        .panel-body(ng-if='ui.isPanelLoaded("#{form}")')
            .col-sm-6
                .settings-row
                    +text('SQL schema name:', model + '.sqlSchema', '"sqlSchema"', 'false', 'Input schema name',
                        'Schema name allow to use existing database queries in your application and according to SQL ANSI-99<br>\
                        Cache is reffered by schema name in cross-cache queries<br/>\
                        Nonquoted identifiers are not case sensitive. Quoted identifiers are case sensitive<br/>\
                        When SQL schema is not specified, quoted cache name should be used<br/>\
                        Query example without schema name:<br>\
                        SELECT .... FROM "cache1".Type1 JOIN "cache2".Type2 ...<br>\
                        The same query using schema name:<br>\
                        SELECT .... FROM cache1.Type1 JOIN cache2.Type2 ...')
                .settings-row
                    +number('On-heap cache for off-heap indexes:', model + '.sqlOnheapRowCacheSize', '"sqlOnheapRowCacheSize"', 'true', '10240', '1',
                        'Number of SQL rows which will be cached onheap to avoid deserialization on each SQL index access')
                .settings-row
                    +number('Long query timeout:', model + '.longQueryWarningTimeout', '"longQueryWarningTimeout"', 'true', '3000', '0',
                        'Timeout in milliseconds after which long query warning will be printed')
                .settings-row
                    -var form = 'querySqlFunctionClasses';
                    -var sqlFunctionClasses = model + '.sqlFunctionClasses';

                    +ignite-form-group(ng-form=form ng-model=sqlFunctionClasses)
                        ignite-form-field-label
                            | SQL functions
                        ignite-form-group-tooltip
                            | Collections of classes with user-defined functions for SQL queries
                        ignite-form-group-add(ng-click='group.add = [{}]')
                            | Add new user-defined functions for SQL queries

                        -var uniqueTip = 'SQL function with such class name already exists!'

                        .group-content(ng-if='#{sqlFunctionClasses}.length')
                            -var model = 'obj.model';
                            -var name = '"edit" + $index'
                            -var valid = form + '[' + name + '].$valid'
                            -var save = sqlFunctionClasses + '[$index] = ' + model

                            div(ng-repeat='model in #{sqlFunctionClasses} track by $index' ng-init='obj = {}')
                                label.col-xs-12.col-sm-12.col-md-12
                                    .indexField
                                        | {{ $index+1 }})
                                    +table-remove-button(sqlFunctionClasses, 'Remove user-defined function')

                                    span(ng-hide='field.edit')
                                        a.labelFormField(ng-click='field.edit = true; #{model} = model;') {{ model }}
                                    span(ng-if='field.edit')
                                        +table-java-class-field('SQL function', name, model, sqlFunctionClasses, valid, save, false)
                                            +table-save-button(valid, save, false)
                                            +unique-feedback(name, uniqueTip)

                        .group-content(ng-repeat='field in group.add')
                            -var model = 'new';
                            -var name = '"new"'
                            -var valid = form + '[' + name + '].$valid'
                            -var save = sqlFunctionClasses + '.push(' + model + ')'

                            div
                                label.col-xs-12.col-sm-12.col-md-12
                                    +table-java-class-field('SQL function', name, model, sqlFunctionClasses, valid, save, true)
                                        +table-save-button(valid, save, true)
                                        +unique-feedback(name, uniqueTip)

                        .group-content-empty(ng-if='!(#{sqlFunctionClasses}.length) && !group.add.length')
                            | Not defined
                .settings-row
                    +checkbox('Snapshotable index', model + '.snapshotableIndex', '"snapshotableIndex"',
                        'Flag indicating whether SQL indexes should support snapshots')
                .settings-row
                    +checkbox('Escape table and filed names', model + '.sqlEscapeAll', '"sqlEscapeAll"',
                        'If enabled than all the SQL table and field names will be escaped with double quotes like "tableName"."fieldName"<br/>\
                        This enforces case sensitivity for field names and also allows having special characters in table and field names')
            .col-sm-6
                +preview-xml-java(model, 'cacheQuery', 'domains')
