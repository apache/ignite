//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include /app/helpers/jade/mixins

-var form = 'serviceConfiguration'
-var model = '$ctrl.clonedCluster.serviceConfigurations'

panel-collapsible(ng-form=form on-open=`ui.loadPanel('${form}')`)
    panel-title Service configuration
    panel-description
        | Service Grid allows for deployments of arbitrary user-defined services on the cluster. 
        | #[a.link-success(href="https://apacheignite.readme.io/docs/fault-tolerance" target="_blank") More info]
    panel-content.pca-form-row(ng-if=`ui.isPanelLoaded('${form}')`)
        .pca-form-column-6
            mixin clusters-service-configurations
                .ignite-form-field(ng-init='serviceConfigurationsTbl={type: "serviceConfigurations", model: "serviceConfigurations", focusId: "kind", ui: "failover-table"}')
                    +ignite-form-field__label('Service configurations:', '"serviceConfigurations"')
                    .ignite-form-field__control
                        -let items = model

                        list-editable(ng-model=items name='serviceConfigurations')
                            list-editable-item-edit
                                - form = '$parent.form'
                    
                                -var nodeFilter = '$item.nodeFilter';
                                -var nodeFilterKind = nodeFilter + '.kind';
                                -var customFilter = nodeFilterKind + ' === "Custom"'

                                .settings-row
                                    +sane-ignite-form-field-text({
                                        label: 'Name:',
                                        model: '$item.name',
                                        name: '"serviceName"',
                                        required: true,
                                        placeholder: 'Input service name'
                                    })(
                                        ui-validate=`{
                                            uniqueName: '$ctrl.Clusters.serviceConfigurations.serviceConfiguration.name.customValidators.uniqueName($item, ${items})'
                                        }`
                                        ui-validate-watch=`"${items}"`
                                        ui-validate-watch-object-equality='true'
                                        ng-model-options='{allowInvalid: true}'
                                    )
                                        +form-field-feedback('"serviceName', 'uniqueName', 'Service with that name is already configured')
                                .settings-row
                                    +java-class('Service class', '$item.service', '"serviceService"', 'true', 'true', 'Service implementation class name')
                                .settings-row
                                    +number('Max per node count:', '$item.maxPerNodeCount', '"ServiceMaxPerNodeCount"', 'true', 'Unlimited', '0',
                                        'Maximum number of deployed service instances on each node.<br/>' +
                                        'Zero for unlimited')
                                .settings-row
                                    +number('Total count:', '$item.totalCount', '"serviceTotalCount"', 'true', 'Unlimited', '0',
                                        'Total number of deployed service instances in the cluster.<br/>' +
                                        'Zero for unlimited')
                                .settings-row
                                    +dropdown-required-empty('Cache:', '$item.cache', '"serviceCache"', 'true', 'false',
                                        'Choose cache', 'No caches configured for current cluster', '$ctrl.cachesMenu', 'Cache name used for key-to-node affinity calculation')(
                                        pc-is-in-collection='$ctrl.clonedCluster.caches'
                                    ).settings-row
                                        +form-field-feedback(form, 'isInCollection', `Cluster doesn't have such a cache`)
                                .settings-row
                                    +text('Affinity key:', '$item.affinityKey', '"serviceAffinityKey"', 'false', 'Input affinity key',
                                        'Affinity key used for key-to-node affinity calculation')

                            list-editable-no-items
                                list-editable-add-item-button(
                                    add-item=`$ctrl.Clusters.addServiceConfiguration($ctrl.clonedCluster)`
                                    label-single='service configuration'
                                    label-multiple='service configurations'
                                )

            +clusters-service-configurations

        .pca-form-column-6
            +preview-xml-java('$ctrl.clonedCluster', 'clusterServiceConfiguration', '$ctrl.caches')
