//-
    Licensed to the Apache Software Foundation (ASF) under one or more
    contributor license agreements.  See the NOTICE file distributed with
    this work for additional information regarding copyright ownership.
    The ASF licenses this file to You under the Apache License, Version 2.0
    (the "License"); you may not use this file except in compliance with
    the License.  You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

include ../../../../../app/helpers/jade/mixins.jade

-var form = 'memory'
-var model = 'backupItem'

form.panel.panel-default(name=form novalidate)
    .panel-heading(bs-collapse-toggle='' ng-click='ui.loadPanel("#{form}")')
        ignite-form-panel-chevron
        label Memory
        ignite-form-field-tooltip.tipLabel
            | Cache memory settings
        ignite-form-revert
    .panel-collapse(role='tabpanel' bs-collapse-target id=form)
        .panel-body(ng-if='ui.isPanelLoaded("#{form}")')
            .col-sm-6
                .settings-row
                    +dropdown('Mode:', model + '.memoryMode', 'memoryMode', 'true', 'ONHEAP_TIERED',
                        '[\
                            {value: "ONHEAP_TIERED", label: "ONHEAP_TIERED"},\
                            {value: "OFFHEAP_TIERED", label: "OFFHEAP_TIERED"},\
                            {value: "OFFHEAP_VALUES", label: "OFFHEAP_VALUES"}\
                        ]',
                        'Memory modes:\
                        <ul>\
                            <li>\
                                ONHEAP_TIERED - entries are cached on heap memory first<br/>\
                                <ul>\
                                    <li>\
                                        If offheap memory is enabled and eviction policy evicts an entry from heap memory, entry will be moved to offheap memory<br/>\
                                        If offheap memory is disabled, then entry is simply discarded\
                                    </li>\
                                    <li>\
                                        If swap space is enabled and offheap memory fills up, then entry will be evicted into swap space<br/>\
                                        If swap space is disabled, then entry will be discarded. If swap is enabled and offheap memory is disabled, then entry will be evicted directly from heap memory into swap\
                                    </li>\
                                </ul>\
                            </li>\
                            <li>\
                                OFFHEAP_TIERED - works the same as ONHEAP_TIERED, except that entries never end up in heap memory and get stored in offheap memory right away<br/>\
                                Entries get cached in offheap memory first and then get evicted to swap, if one is configured\
                            </li>\
                            <li>\
                                OFFHEAP_VALUES - entry keys will be stored on heap memory, and values will be stored in offheap memory<br/>\
                                Note that in this mode entries can be evicted only to swap\
                            </li>\
                        </ul>')
                .settings-row(data-ng-show=model + '.memoryMode !== "OFFHEAP_VALUES"')
                    +number-required('Off-heap max memory:', model + '.offHeapMaxMemory', 'offHeapMaxMemory', 'true',
                        model + '.memoryMode === "OFFHEAP_TIERED"', '-1', '-1',
                        'Sets maximum amount of memory available to off-heap storage<br/>\
                        Possible values are:\
                        <ul>\
                            <li>-1 - means that off-heap storage is disabled</li>\
                            <li>0 - Ignite will not limit off-heap storage (it is up to user to properly add and remove entries from cache to ensure that off-heap storage does not grow infinitely)</li>\
                            <li>Any positive value specifies the limit of off-heap storage in bytes</li>\
                        </ul>')
                .settings-row
                    -var onHeapTired = model + '.memoryMode === "ONHEAP_TIERED"'
                    -var swapEnabled = model + '.swapEnabled'
                    -var offHeapMaxMemory = model + '.offHeapMaxMemory'

                    +evictionPolicy(model + '.evictionPolicy', 'evictionPolicy', 'true',
                        onHeapTired  + ' && (' + swapEnabled + '|| _.isNumber(' + offHeapMaxMemory + ') &&' + offHeapMaxMemory + ' >= 0)',
                        'Optional cache eviction policy<br/>\
                        Must be set for entries to be evicted from on - heap to off - heap or swap')
                .settings-row
                    +number('Start size:', model + '.startSize', 'startSize', 'true', '1500000', '0',
                        'Initial cache size which will be used to pre-create internal hash table after start')
                .settings-row
                    +checkbox('Swap enabled', model + '.swapEnabled', 'swapEnabled', 'Flag indicating whether swap storage is enabled or not for this cache')
            .col-sm-6
                +preview-xml-java(model, 'cacheMemory')
