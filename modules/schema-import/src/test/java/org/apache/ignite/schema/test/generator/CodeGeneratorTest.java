/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ignite.schema.test.generator;

import java.io.File;
import org.apache.ignite.schema.generator.CodeGenerator;
import org.apache.ignite.schema.model.PojoDescriptor;
import org.apache.ignite.schema.test.AbstractSchemaImportTest;

/**
 * Tests for POJO generator.
 */
public class CodeGeneratorTest extends AbstractSchemaImportTest {
    /** Marker string to skip date generation while comparing.*/
    private static final String GEN_PTRN = "Code generated by Apache Ignite Schema Import utility";

    /** Test package. */
    private static final String TEST_PACKAGE = "org.apache.ignite.schema.test.model";

    /** Path to generated model. */
    private static final String TEST_PATH = "org/apache/ignite/schema/test/model";

    /**
     * Test that POJOs generated correctly.
     */
    public void testPojoGeneration() throws Exception {
        Boolean containsSchema = false;

        for (PojoDescriptor pojo : all) {
            if (pojo.valueClassName().isEmpty())
                containsSchema = true;
            else {
                CodeGenerator.pojos(pojo, OUT_DIR_PATH, TEST_PACKAGE, true, true, YES_TO_ALL);

                assertTrue("Generated key class POJO content is differ from expected for type " + pojo.keyClassName(),
                        compareFiles(pojo.keyClassName(), TEST_PATH, GEN_PTRN));

                assertTrue("Generated value class POJO content is differ from expected for type " + pojo.valueClassName(),
                        compareFiles(pojo.valueClassName(), TEST_PATH, GEN_PTRN));
            }
        }

        assertTrue("Generated POJOs does not contains schema.", containsSchema);
    }

    /**
     * Test that configuration generated correctly.
     */
    public void testConfigGeneration() throws Exception {
        CodeGenerator.snippet(pojos, TEST_PACKAGE, true, true, OUT_DIR_PATH, YES_TO_ALL);

        assertTrue("Generated configuration is differ from expected", compareFiles("CacheConfig", TEST_PATH, GEN_PTRN));
    }

    /**
     * @param typeName Type name.
     * @param intPath Internal path.
     * @return {@code true} if generated POJO as expected.
     */
    private boolean compareFiles(String typeName, String intPath, String excludePtrn) {
        String relPath = intPath + "/" + typeName;

        return compareFilesInt(getClass().getResourceAsStream("/" + relPath + ".txt"),
                new File(OUT_DIR_PATH + "/" + relPath + ".java"), excludePtrn);
    }
}
