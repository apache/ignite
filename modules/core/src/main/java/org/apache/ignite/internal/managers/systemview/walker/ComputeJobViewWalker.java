/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.ignite.internal.managers.systemview.walker;

import java.util.UUID;
import org.apache.ignite.lang.IgniteUuid;
import org.apache.ignite.spi.systemview.view.ComputeJobView;
import org.apache.ignite.spi.systemview.view.SystemViewRowAttributeWalker;

/**
 * Generated by {@code org.apache.ignite.codegen.SystemViewRowAttributeWalkerGenerator}.
 * {@link ComputeJobView} attributes walker.
 * 
 * @see ComputeJobView
 */
public class ComputeJobViewWalker implements SystemViewRowAttributeWalker<ComputeJobView> {
    /** {@inheritDoc} */
    @Override public void visitAll(AttributeVisitor v) {
        v.accept(0, "affinityCacheNames", String.class);
        v.accept(1, "affinityPartitionId", int.class);
        v.accept(2, "createTime", long.class);
        v.accept(3, "executorName", String.class);
        v.accept(4, "fininshTime", long.class);
        v.accept(5, "id", IgniteUuid.class);
        v.accept(6, "isFinishing", boolean.class);
        v.accept(7, "isInternal", boolean.class);
        v.accept(8, "isStarted", boolean.class);
        v.accept(9, "isSysCancelled", boolean.class);
        v.accept(10, "isSysStopping", boolean.class);
        v.accept(11, "isTimedOut", boolean.class);
        v.accept(12, "originNodeId", UUID.class);
        v.accept(13, "startTime", long.class);
        v.accept(14, "taskClassName", String.class);
        v.accept(15, "taskName", String.class);
    }

    /** {@inheritDoc} */
    @Override public void visitAll(ComputeJobView row, AttributeWithValueVisitor v) {
        v.accept(0, "affinityCacheNames", String.class, row.affinityCacheIds());
        v.acceptInt(1, "affinityPartitionId", row.affinityPartitionId());
        v.acceptLong(2, "createTime", row.createTime());
        v.accept(3, "executorName", String.class, row.executorName());
        v.acceptLong(4, "fininshTime", row.fininshTime());
        v.accept(5, "id", IgniteUuid.class, row.id());
        v.acceptBoolean(6, "isFinishing", row.isFinishing());
        v.acceptBoolean(7, "isInternal", row.isInternal());
        v.acceptBoolean(8, "isStarted", row.isStarted());
        v.acceptBoolean(9, "isSysCancelled", row.isSysCancelled());
        v.acceptBoolean(10, "isSysStopping", row.isSysStopping());
        v.acceptBoolean(11, "isTimedOut", row.isTimedOut());
        v.accept(12, "originNodeId", UUID.class, row.originNodeId());
        v.acceptLong(13, "startTime", row.startTime());
        v.accept(14, "taskClassName", String.class, row.taskClassName());
        v.accept(15, "taskName", String.class, row.taskName());
    }

    /** {@inheritDoc} */
    @Override public int count() {
        return 16;
    }
}
