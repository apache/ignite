/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.ignite.internal.processors.subscription;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Collectors;
import org.apache.ignite.internal.GridKernalContext;
import org.apache.ignite.internal.processors.GridProcessorAdapter;

/**
 * Processor enables grid components to register listeners for events
 * generated by other components on local node.
 *
 * It starts very first during node startup procedure so any components could use it.
 *
 * As only local events are supported, no network communication occurs during notification process.
 */
public class GridInternalSubscriptionProcessor extends GridProcessorAdapter {
    /** */
    private final Map<Class, List<InternalSubscriber>> lsnrs = new ConcurrentHashMap<>();

    /**
     * @param ctx Kernal context.
     */
    public GridInternalSubscriptionProcessor(GridKernalContext ctx) {
        super(ctx);
    }

    /**
     * Register internal subscriber listener.
     * Note: all listeners should be registered before first {@link #getSubscribers(Class)} call.
     *
     * @param subscriber Internal subscriber.
     */
    public void registerSubscriber(InternalSubscriber subscriber) {
        if (subscriber == null)
            throw new NullPointerException("Subscriber should be not-null.");

        lsnrs.computeIfAbsent(InternalSubscriber.class, (k) -> new ArrayList<>()).add(subscriber);

        assert lsnrs.size() == 1 : lsnrs; // all subscribers have to be added before first getSubscribers() call.
    }

    /**
     * Get subscribers for given type.
     * Note: all listeners should be registered before first {@link #getSubscribers(Class)} call.
     *
     * @param type Internal subscriber type.
     * @return Subscribers list.
     */
    public <T extends InternalSubscriber> List<T> getSubscribers(Class<T> type) {
        List<InternalSubscriber> res = lsnrs.get(type);

        if (res == null) {
            res = lsnrs.getOrDefault(InternalSubscriber.class, Collections.emptyList()).stream()
                .filter(s -> type.isAssignableFrom(s.getClass())).collect(Collectors.toList());

            lsnrs.put(type, res);
        }

        return (List<T>)res;
    }
}
