# name: test/sql/function/operator/test_arithmetic.test
# description: Test arithmetic statements
# group: [operator]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE integers(ii INTEGER);

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL)

# comparisons involving arithmetic
# these are interesting because these will be folded by optimizers
# so we test if the optimizers work correctly
# addition is unordered (ii.e. ii+2=2+ii)
# ii+2=5 => ii=3
query TT
SELECT ii+2=5, 5=ii+2 FROM integers ORDER BY ii
----
NULL	NULL
0	0
0	0
1	1

# 2+ii=5 => ii=3
query TT
SELECT 2+ii=5, 5=2+ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
0	0
1	1

# multiplication is unordered
# ii*2=6 => ii=3
query TT
SELECT ii*2=6, 6=ii*2 FROM integers ORDER BY ii
----
NULL	NULL
0	0
0	0
1	1

# 2*ii=6 => ii=3
query TT
SELECT 2*ii=6, 6=2*ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
0	0
1	1

# ii*2=5 (this comparison is always FALSE, except if ii is NULL in which case it is NULL)
query T
SELECT ii*2=5 FROM integers ORDER BY ii
----
NULL
0
0
0

# ii*0=5
query T
SELECT ii*0=5 FROM integers ORDER BY ii
----
NULL
0
0
0

# -ii>-2 => ii<2
query T
SELECT -ii>-2 FROM integers ORDER BY ii
----
NULL
1
0
0

# subtraction is ordered
# ii-2=1 => ii=3
query TT
SELECT ii-2=1, 1=ii-2 FROM integers ORDER BY ii
----
NULL	NULL
0	0
0	0
1	1

# 3-ii=1 => ii=2
query TT
SELECT 3-ii=1, 1=3-ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
0	0

# non-equality comparisons should also be flipped in this case
# 3-ii<2 => ii>2
query TT
SELECT 3-ii<2, 2>3-ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
1	1

query TT
SELECT 3-ii<=1, 1>=3-ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
1	1

# division is ordered
# ii/2=1 => ii>=2 or ii<=3
query TT
SELECT ii/2=1, 1=ii/2 FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
1	1

# 2/ii=1 => ii=2
query TT
SELECT 2/ii=1, 1=2/ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
0	0

# 3/ii=2 => ii=2
query TT
SELECT 2/ii=1, 1=2/ii FROM integers ORDER BY ii
----
NULL	NULL
0	0
1	1
0	0

