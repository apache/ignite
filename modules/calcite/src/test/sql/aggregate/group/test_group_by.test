# name: test/sql/aggregate/group/test_group_by.test
# description: Test aggregation/group by statements
# group: [group]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE test (aa INTEGER, bb INTEGER);

statement ok
INSERT INTO test VALUES (11, 22), (13, 22), (12, 21)

# aggregates cannot be nested
statement error
SELECT SUM(SUM(41)), COUNT(*);

# simple aggregates without group by
query RIR
SELECT SUM(aa), COUNT(*), AVG(aa) FROM test;
----
36.000000	3	12.000000

query I
SELECT COUNT(*) FROM test;
----
3

query RI
SELECT SUM(aa), COUNT(*) FROM test WHERE aa = 11;
----
11.000000	1

query RRR
SELECT SUM(aa), SUM(bb), SUM(aa) + SUM (bb) FROM test;
----
36.000000	65.000000	101.000000

query RR
SELECT SUM(aa+2), SUM(aa) + 2 * COUNT(*) FROM test;
----
42.000000	42.000000

# aggregations with group by
query IRRR
SELECT bb, SUM(aa), SUM(aa+2), AVG(aa) FROM test GROUP BY bb ORDER BY bb;
----
21	12.000000	14.000000	12.000000
22	24.000000	28.000000	12.000000

# ORDER BY aggregation that does not occur in SELECT clause
query IR
SELECT bb, SUM(aa) FROM test GROUP BY bb ORDER BY COUNT(aa);
----
21	12.000000
22	24.000000

query IR
SELECT bb, SUM(aa) FROM test GROUP BY bb ORDER BY COUNT(aa) DESC;
----
22	24.000000
21	12.000000

query IRIR
SELECT bb, SUM(aa), COUNT(*), SUM(aa+2) FROM test GROUP BY bb ORDER BY bb;
----
21	12.000000	1	14.000000
22	24.000000	2	28.000000

# group by alias
query IR
SELECT bb % 2 AS f, SUM(aa) FROM test GROUP BY f;
----
0	24.000000
1	12.000000

# group by with filter
query IRIR
SELECT bb, SUM(aa), COUNT(*), SUM(aa+2) FROM test WHERE aa <= 12 GROUP BY bb ORDER BY bb;
----
21	12.000000	1	14.000000
22	11.000000	1	13.000000

# nested aggregate in group by
statement error
SELECT bb % 2 AS f, COUNT(SUM(aa)) FROM test GROUP BY f;

statement ok
INSERT INTO test VALUES (12, 21), (12, 21), (12, 21)

# group by with filter and multiple values per groups
query IRIR
SELECT bb, SUM(aa), COUNT(*), SUM(aa+2) FROM test WHERE aa <= 12 GROUP BY bb ORDER BY bb;
----
21	48.000000	4	56.000000
22	11.000000	1	13.000000

# group by with filter and multiple values per groups
statement ok
CREATE TABLE integers(ii INTEGER, jj INTEGER);

statement ok
INSERT INTO integers VALUES (3, 4), (3, 4), (2, 4);

# use GROUP BY column in math operator
query II
SELECT ii, ii + 10 FROM integers GROUP BY ii ORDER BY ii
----
2	12
3	13

# using non-group column and non-aggregate should throw an error
statement error
SELECT ii, SUM(jj), jj FROM integers GROUP BY ii ORDER BY ii

# but it works if we wrap it in FIRST()
query IRI
SELECT ii, SUM(jj), FIRST(jj) FROM integers GROUP BY ii ORDER BY ii
----
2	4.000000	4
3	8.000000	4

# group by constant alias
query IR
SELECT 1 AS kk, SUM(ii) FROM integers GROUP BY kk ORDER BY 2;
----
1	8.000000

# use an alias that is identical to aa column name (should prioritize column name)
query IR
SELECT 1 AS ii, SUM(ii) FROM integers GROUP BY ii ORDER BY 2;
----
1	2.000000
1	6.000000

# refer to the same alias twice
query IR
SELECT ii % 2 AS kk, SUM(ii) FROM integers GROUP BY kk, kk ORDER BY 1;
----
0	2.000000
1	6.000000

statement ok
DROP TABLE integers;

statement ok
CREATE TABLE integers(ii INTEGER);

statement ok
INSERT INTO integers VALUES (1), (2), (3), (NULL);

# group by NULL
query IR
SELECT ii, SUM(ii) FROM integers GROUP BY ii ORDER BY 1;
----
NULL	NULL
1	1.000000
2	2.000000
3	3.000000

# column reference should have preference over alias reference in grouping
query IIR
SELECT ii, ii % 2 AS ii, SUM(ii) FROM integers GROUP BY ii ORDER BY 1;
----
NULL	NULL	NULL
1	1	1.000000
2	0	2.000000
3	1	3.000000

# aliases can only be referenced in the GROUP BY as the root column: operations not allowed
# CONTROVERSIAL: this query DOES work in SQLite
statement error
SELECT 1 AS kk, SUM(ii) FROM integers GROUP BY kk+1 ORDER BY 2;

# group by column refs should be recognized, even if one uses an explicit table specifier and the other does not
query IR
SELECT test.bb, SUM(aa) FROM test GROUP BY bb ORDER BY COUNT(aa) DESC;
----
21	48.000000
22	24.000000

