# name: test/sql/aggregate/having/test_having.test
# description: Test HAVING clause
# group: [having]

statement ok
CREATE TABLE test (aa INTEGER, bb INTEGER);

statement ok
INSERT INTO test VALUES (11, 22), (13, 22), (12, 21)

# HAVING with condition on group
query IR
SELECT bb, SUM(aa) AS sum FROM test GROUP BY bb HAVING bb=21 ORDER BY bb;
----
21	12.000000

# HAVING with condition on sum
query IR
SELECT bb, SUM(aa) FROM test GROUP BY bb HAVING SUM(aa) < 20 ORDER BY bb;
----
21	12.000000

# HAVING with condition on ALIAS
# CONTROVERSIAL: this DOES work in SQLite, but not in PostgreSQL
query II
SELECT bb, SUM(aa) AS sum FROM test GROUP BY bb HAVING sum < 20 ORDER BY bb;
----
21	12

# HAVING without alias
query IR
SELECT bb, SUM(aa) AS sum FROM test GROUP BY bb HAVING SUM(aa) < 20 ORDER BY bb;
----
21	12.000000

# HAVING on column not in aggregate
query IR
SELECT bb, SUM(aa) AS sum FROM test GROUP BY bb HAVING COUNT(*) = 1 ORDER BY bb;
----
21	12.000000

# expression in having
query IR
SELECT bb, SUM(aa) FROM test GROUP BY bb HAVING SUM(aa)+10>28;
----
22	24.000000

# uncorrelated subquery in having
query IR
SELECT bb, SUM(aa) FROM test GROUP BY bb HAVING SUM(aa)>(SELECT SUM(t.aa)*0.5 FROM test t);
----
22	24.000000

# correlated subquery in having
query IR
SELECT test.bb, SUM(aa) FROM test GROUP BY test.bb HAVING SUM(aa)=(SELECT SUM(aa) FROM test t WHERE test.bb=t.bb) ORDER BY test.bb;
----
21	12.000000
22	24.000000

# use outer aggregation in inner subquery
query IR
SELECT test.bb, SUM(aa) FROM test GROUP BY test.bb HAVING SUM(aa)*2=(SELECT SUM(aa)+SUM(t.aa) FROM test t WHERE test.bb=t.bb) ORDER BY test.bb
----
21	12.000000
22	24.000000

# use outer aggregation that hasn't been used yet in subquery
query IR
SELECT test.bb, SUM(aa) FROM test GROUP BY test.bb HAVING SUM(aa)*2+2=(SELECT SUM(aa)+SUM(t.aa)+COUNT(t.aa) FROM test t WHERE test.bb=t.bb) ORDER BY test.bb
----
22	24.000000

# ORDER BY subquery
query IR
SELECT test.bb, SUM(aa) FROM test GROUP BY test.bb ORDER BY (SELECT SUM(aa) FROM test t WHERE test.bb=t.bb) DESC;
----
22	24.000000
21	12.000000

