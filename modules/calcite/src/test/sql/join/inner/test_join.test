# name: test/sql/join/inner/test_join.test
# description: Test basic joins of tables
# group: [inner]

statement ok
PRAGMA enable_verification

statement ok
CREATE TABLE test (aa INTEGER, bb INTEGER);

statement ok
INSERT INTO test VALUES (11, 1), (12, 2), (13, 3)

statement ok
CREATE TABLE test2 (bb INTEGER, cc INTEGER);

statement ok
INSERT INTO test2 VALUES (1, 10), (1, 20), (2, 30)

# simple cross product + join condition
query III
SELECT aa, test.bb, cc FROM test, test2 WHERE test.bb = test2.bb ORDER BY cc;
----
11	1	10
11	1	20
12	2	30

# ambiguous reference to column
statement error
SELECT bb FROM test, test2 WHERE test.bb > test2.bb;

# simple cross product + multiple join conditions
query III
SELECT aa, test.bb, cc FROM test, test2 WHERE test.bb=test2.bb AND test.aa-1=test2.cc
----
11	1	10

# use join columns in subquery
query III
SELECT aa, (SELECT test.aa), cc FROM test, test2 WHERE test.bb = test2.bb ORDER BY cc;
----
11	11	10
11	11	20
12	12	30

# explicit join
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON test.bb = test2.bb ORDER BY cc;
----
11	1	10
11	1	20
12	2	30

# explicit join with condition the wrong way around
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON test2.bb = test.bb ORDER BY cc;
----
11	1	10
11	1	20
12	2	30

# explicit join with additional condition that is no left-right comparision
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON test2.bb = test.bb and test.bb = 2;
----
12	2	30

# explicit join with additional condition that is constant
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON test2.bb = test.bb and 2 = 2 ORDER BY cc;
----
11	1	10
11	1	20
12	2	30

# explicit join with only condition that is no left-right comparision
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON test.bb = 2 ORDER BY cc;
----
12	2	10
12	2	20
12	2	30

# explicit join with only condition that is constant
query III
SELECT aa, test.bb, cc FROM test INNER JOIN test2 ON NULL = 2;
----

# equality join where both lhs and rhs keys are projected
query II
SELECT * FROM (VALUES (1)) tbl(ii) JOIN (VALUES (1)) tbl2(jj) ON (ii=jj);
----
1	1

# equality join where both lhs and rhs keys are projected with filter
query II
SELECT * FROM (VALUES (1), (2)) tbl(ii) JOIN (VALUES (1), (2)) tbl2(jj) ON (ii=jj) WHERE ii+jj=2;
----
1	1

