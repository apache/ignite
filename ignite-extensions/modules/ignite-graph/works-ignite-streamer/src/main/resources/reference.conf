#
# The configuration section to connect to a set
# of Works & Sensor Beats, receive their SSE events
# and ship them to respective Apache Ignite caches
#
beat = {
  #
  # The primary key (name) assigned to Works & Sensor
  # Beats tables
  #
  primaryKey = "beat_key"
  #
  # The namespace used to uniquely define the vertex & edges
  # or table caches that contain Works & Sensor Beat events
  #
  namespace = "beat"
  #
  # The configuration of the set of receivers (each for a certain
  # Works & Sensor Beat)
  #
  receivers = [
    {
        #
        # The authentication token used to connect to certain
        # Works & Sensor Beat SSE server
        #
        authToken = ""
        #
        # The endpoint url of the specific Works & Sensor SSE
        # server.
        #
        endpoint = ""
        #
        # The number of threads used by the BeatReceiver
        #
        numThreads = 1
        #
        # SSL/TLS support for connections to the
        # Works & Sensor Beat endpoint
        #
        security = {
          #
          # The default configuration for subscription
          # requests does not support SSL/TLS. Set this
          # value to "true" to enable encryption
          #
          ssl = "false"
          #
          # The path to the keystore file
          #
          ksFile = ""
          #
          # The keystore type
          #
          ksType = ""
          #
          # The keystore password
          #
          ksPass = ""
          #
          # The keystore algorithm
          #
          ksAlgo = ""
          #
          # The path to the truststore file
          #
          tsFile = ""
          #
          # The truststore type
          #
          tsType = ""
          #
          # The truststore password
          #
          tsPass = ""
          #
          # The truststore algorithm
          #
          tsAlgo = ""
          #
          # The path to the certificate file of the
          # Certificate authority
          #
          caCertFile = ""
          #
          # The path to the certificate file
          #
          certFile = ""
          #
          # The path to the private key file
          #
          privateKeyFile = ""
          #
          # The password for the private key file
          #
          privateKeyFilePass = ""
        }
    }
  ]
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The BeatStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'table'.
  #
  writeMode = "table"
}

fiware = {
  #
  # The primary key (name) assigned the Fiware table
  #
  primaryKey = "fiware_key"

  actor = {
    #
    # Timeout in seconds
    #
    timeout = 5
    #
    # Parameters to control the handling of failed child actors:
    # it is the number of retries within a certain time window.
    #
    # The supervisor strategy restarts a child up to 10 restarts
    # per minute. The child actor is stopped if the restart count
    # exceeds maxRetries during the withinTimeRange duration.
    #
    maxRetries = 10
    #
    # Time range in minutes
    #
    timeRange = 1
    #
    # Child actors are defined leveraging a RoundRobin pool with a
    # dynamic resizer. The boundaries of the resizer are defined
    # below
    #
    lower = 2
    upper = 100
    #
    # The number of instances for the RoundRobin pool
    #
    instances = 50
  }
  #
  # The endpoint of the Orion Context Broker; this configuration
  # must be adapted to the current environment
  #
  broker = {
    endpoint = "http://127.0.0.1:9080"
    #
    # SSL/TLS support for send subscription requests
    # to the Fiware Context Broker
    #
    security = {
      #
      # The default configuration for subscription
      # requests does not support SSL/TLS. Set this
      # value to "true" to enable encryption
      #
      ssl = "false"
      #
      # The path to the keystore file
      #
      ksFile = ""
      #
      # The keystore type
      #
      ksType = ""
      #
      # The keystore password
      #
      ksPass = ""
      #
      # The keystore algorithm
      #
      ksAlgo = ""
      #
      # The path to the truststore file
      #
      tsFile = ""
      #
      # The truststore type
      #
      tsType = ""
      #
      # The truststore password
      #
      tsPass = ""
      #
      # The truststore algorithm
      #
      tsAlgo = ""
      #
      # The path to the certificate file of the
      # Certificate authority
      #
      caCertFile = ""
      #
      # The path to the certificate file
      #
      certFile = ""
      #
      # The path to the private key file
      #
      privateKeyFile = ""
      #
      # The password for the private key file
      #
      privateKeyFilePass = ""
    }

  }
  #
  # The name of the smart data model that is used to interpret
  # notifications sent from an NGSI v2 | NGSI-LD Context Broker
  #
  model = {
    name = "AgriFood"
  }
  #
  # The namespace used to uniquely define the vertex & edges
  # caches that contain graphified Fiware notifications
  #
  namespace = "fiware"
  #
  # The configuration of the Fiware notification server
  #
  server = {
    #
    # The HTTP binding for the Fiware notification server;
    # this configuration must be adapted to the current
    # environment
    #
    binding = {
      host = "127.0.0.1"
      port = 9090
    }
    #
    # The security configuration for SSL/TLS. Support is a key and
    # trust store based approach as well as the usage of certificates
    #
    security = {
      #
      # The default configuration for notification
      # requests does not support SSL/TLS. Set this
      # value to "true" to enable encryption
      #
      ssl = "false"
      #
      # The path to the keystore file
      #
      ksFile = ""
      #
      # The keystore type
      #
      ksType = ""
      #
      # The keystore password
      #
      ksPass = ""
      #
      # The keystore algorithm
      #
      ksAlgo = ""
      #
      # The path to the truststore file
      #
      tsFile = ""
      #
      # The truststore type
      #
      tsType = ""
      #
      # The truststore password
      #
      tsPass = ""
      #
      # The truststore algorithm
      #
      tsAlgo = ""
      #
      # The path to the certificate file of the
      # Certificate authority
      #
      caCertFile = ""
      #
      # The path to the certificate file
      #
      certFile = ""
      #
      # The path to the private key file
      #
      privateKeyFile = ""
      #
      # The password for the private key file
      #
      privateKeyFilePass = ""
    }
  }
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The FiwareStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'graph'.
  #
  writeMode = "graph"
}
ignite {
  #
  # Ignite REST API default host
  #
  host = "127.0.0.1"
  #
  # Ignite REST API default port
  #
  port = 8080
  #
  # Ignite REST API default protocol
  #
  protocol = "http"
  #
  # If you plan to allocate large amounts of memory to your JVM for data
  # caching (usually more than 10GB of memory), then your application will
  # most likely suffer from prolonged lock-the-world GC pauses which can
  # significantly hurt latencies. To avoid GC pauses, use off-heap memory
  # to cache the data - essentially, your data is still cached in the memory,
  # but the JVM does not know about it and GC is not affected.
  #
  # Enables off-heap storage with unlimited size:
  offHeapMaxMemory = 0
  #
  # Ignite's internal cache map acts exactly like a normal Java HashMap:
  # it has some initial capacity (100000), which doubles as data arrives.
  #
  # The process of internal cache map resizing is CPU-intensive, and if
  # one loads a huge dataset into the cache, the map will have to resize
  # a lot of times.
  #
  # To avoid that, you can specify the initial cache map capacity, comparable
  # to the expected size of your dataset.
  startSize = 1000000
  #
  # Write Behind (vs. Write Through) is an Apache Ignite strategy to update
  # the associated backend store (Crate DB). Write Behind performs an extra
  # caching of entries to be persisted into the store.
  #
  # Write Behind operates time or size controlled. Lessons learned:
  #
  # IgniteRDD (based on a certain cache) & Write Behind result in large variety
  # of numbers of entries that are written into the store (from 1 to 10k).
  #
  # We therefore recommend to leverage Write Through as this strategy is
  # accompanied by an application controlled batch mechanism (IgniteBatchRDD)
  # that directly leverages the partitions of an Apache Spark RDD.
  writeBehind = false
  #
  # Maximum size of the write-behind cache. If cache size exceeds this value,
  # all cached items are flushed to the cache store and write cache is cleared.
  #
  # If this value is 0, then flush is performed according to the flush frequency
  # interval. Note that you cannot set both, flush size and flush frequency, to 0.
  writeBehindFlushSize = 10240
  #
  # Frequency with which write-behind cache is flushed to the store in milliseconds.
  # This value defines the maximum time interval between object insertion/deletion
  # from the cache and the moment when corresponding operation is applied to the
  # cache store. If this value is 0, then flush is performed according to the flush
  # size. Note that you cannot set both, flush size and flush frequency, to 0.
  writeBehindFlushFrequency = 5000
  #
  # Number of threads that will perform cache flushing.
  writeBehindFlushThreadCount = 1
  #
  # Maximum batch size for write-behind cache store operations.
  writeBehindBatchSize = 512
  #
  # A table is refreshed periodically with a specified refresh interval. By default,
  # the refresh interval is set to 1000 milliseconds. The refresh interval of a table
  # can be changed with the table parameter refresh_interval
  refreshInterval = 1000
  #
  # This is default prefix of the Apache Ignite file system
  #
  fsDefaultName = "igfs://igfs@/"
}
opencti {
  #
  # The primary key (name) assigned to OpenCTI log tables
  #
  primaryKey = "opencti_key"
  #
  # The namespace used to uniquely define the vertex & edges
  # caches that contain graphified OpenCTI events
  #
  namespace = "opencti"
  receiver = {
    #
    # The authentication token used to connect to the
    # OpenCTI Streams event server
    #
    authToken = ""
    #
    # The url of the OpenCTI SSE endpoint. In case of a live
    # stream make sure that the respective stream identifier
    # has been created (see OpenCTI platform)
    #
    endpoint = ""
    #
    # The number of threads used by the CTIReceiver
    #
    numThreads = 1
    #
    # SSL/TLS support for connections to the
    # OpenCTI streams endpoint
    #
    security = {
      #
      # The default configuration for subscription
      # requests does not support SSL/TLS. Set this
      # value to "true" to enable encryption
      #
      ssl = "false"
      #
      # The path to the keystore file
      #
      ksFile = ""
      #
      # The keystore type
      #
      ksType = ""
      #
      # The keystore password
      #
      ksPass = ""
      #
      # The keystore algorithm
      #
      ksAlgo = ""
      #
      # The path to the truststore file
      #
      tsFile = ""
      #
      # The truststore type
      #
      tsType = ""
      #
      # The truststore password
      #
      tsPass = ""
      #
      # The truststore algorithm
      #
      tsAlgo = ""
      #
      # The path to the certificate file of the
      # Certificate authority
      #
      caCertFile = ""
      #
      # The path to the certificate file
      #
      certFile = ""
      #
      # The path to the private key file
      #
      privateKeyFile = ""
      #
      # The password for the private key file
      #
      privateKeyFilePass = ""
    }
  }
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The CTIStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'table'.
  #
  writeMode = "graph"
}
#
# FleetDM configuration: This project implements a file (directory)
# watcher based on Akka streams. Modifications are directly streamed
# to the connected Apache Ignite platform.
#
osquery_fleet {
  #
  # The primary key (name) assigned to Fleet log tables
  #
  primaryKey = "fleet_key"
  #
  # The namespace used to uniquely define and prefix
  # the FleetDM log messages generated by the fleet
  # of connected Osquery agents.
  #
  namespace = "fleetdm"
  receiver = {
    #
    # The parent file system folder path that contains
    # FleetDM log files
    #
    fleetFolder = ""
    #
    # The number of threads used by the FleetReceiver
    #
    numThreads = 1
    #
    # The polling interval of the FleetReceiver in seconds
    #
    pollingInterval = 1
    #
    # The buffer size of the FleetReceiver for file system
    # events
    #
    maxBufferSize = 1000
    #
    # The file name postfix used to identify FleetDM log
    # files
    #
    postfix = ".log"
    #
    # The maximum number of bytes of a file line
    #
    maxLineSize = 8192
  }
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The FleetStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'table'.
  #
  writeMode = "table"
}
#
# Osquery configuration: This project implements a TLS endpoint,
# connected and configured Osquery agents send query results and
# status messages to.
#
osquery_tls {
  #
  # The primary key (name) assigned to TLS log tables
  #
  primaryKey = "tls_key"
  actor = {
    #
    # Timeout in seconds
    #
    timeout = 5
    #
    # Parameters to control the handling of failed child actors:
    # it is the number of retries within a certain time window.
    #
    # The supervisor strategy restarts a child up to 10 restarts
    # per minute. The child actor is stopped if the restart count
    # exceeds maxRetries during the withinTimeRange duration.
    #
    maxRetries = 10
    #
    # Time range in minutes
    #
    timeRange = 1
    #
    # Child actors are defined leveraging a RoundRobin pool with a
    # dynamic resizer. The boundaries of the resizer are defined
    # below
    #
    lower = 2
    upper = 100
    #
    # The number of instances for the RoundRobin pool
    #
    instances = 50
  }
  #
  # The namespace used to uniquely define and prefix the query results
  # and status messages sent by the connected Osquery agents.
  #
  # Note, the current implementation does not transform Osquery events
  # into an information graph, but in multiple (pre-defined) tables.
  #
  namespace = "osquery"
  server = {
    #
    # The HTTP binding for the Osquery TLS event server;
    # this configuration must be adapted to the current
    # environment
    #
    binding = {
      host = "127.0.0.1"
      port = 9091
    }
  }
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The FleetStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'table'.
  #
  writeMode = "table"
}

spark {
  #
  # The name of the Apache Spark application
  #
  appName = "IgniteFrames"
  checkpointDir = "/Work/spark/checkpoints"
  driver = {
    maxResultSize = "4g"
    memory        = "12g"
  }
  executor = {
    instances = "2"
    memory    = "12g"
  }
  #
  # The Apache Spark master
  #
  master = "local[4]"
}
#
# Zeek configuration: This project implements a file (directory)
# watcher based on Akka streams. Modifications are directly streamed
# to the connected Apache Ignite platform.
#
zeek {
  #
  # The namespace used to uniquely define and prefix
  # the zeek log messages generated by the Zeek network
  # sensor.
  #
  namespace = "zeek"
  #
  # The primary key (name) assigned to Zeek log tables
  #
  primaryKey = "zeek_key"
  receiver = {
    #
    # The parent file system folder path that contains
    # Zeek log files
    #
    zeekFolder = ""
    #
    # The number of threads used by the ZeekReceiver
    #
    numThreads = 1
    #
    # The polling interval of the ZeekReceiver in seconds
    #
    pollingInterval = 1
    #
    # The buffer size of the ZeekReceiver for file system
    # events
    #
    maxBufferSize = 1000
    #
    # The file name postfix used to identify Zeek log
    # files
    #
    postfix = ".log"
    #
    # The maximum number of bytes of a file line
    #
    maxLineSize = 8192
  }
  #
  # The configuration for the Apache Ignite streamer
  #
  streamer = {
    #
    # Automatic flush frequency in milliseconds. Essentially, this is
    # the time after which the streamer will make an attempt to submit
    # all data added so far to remote nodes. The flush frequency is
    # defined in milliseconds
    #
    autoFlushFrequency = 500
    #
    # The number of threads used to run the streamer
    #
    numThreads = 1
    #
    # The frequency we flush the internal store and write
    # data to the predefined output is currently set to
    # 2 times of the stream buffer flush frequency
    #
    flushWindow = 2000
    #
    # The time window specifies the batch window that
    # is used to gather stream events
    #
    timeWindow  = 5000
  }
  #
  # Apache Ignite accepts additional parameters not defined by ANSI-99 SQL
  # when creating a (cache table)
  #
  # TEMPLATE=PARTITIONED or TEMPLATE=REPLICATED to create the cache with the
  # corresponding replication mode.
  #
  # ATOMICITY=[ATOMIC | TRANSACTIONAL | TRANSACTIONAL_SNAPSHOT] sets atomicity
  # mode of the cache. Default is, that caches are created with the ATOMIC mode
  # enabled. If TRANSACTIONAL_SNAPSHOT is specified, the table supports transactions.
  #
  tableParameters = "TEMPLATE=REPLICATED"
  #
  # The ZeekStream applications supports different write modes.
  # Supported values are 'graph' and 'table'. Default is 'table'.
  #
  writeMode = "table"
}