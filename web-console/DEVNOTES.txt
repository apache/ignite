Web Console Build Instructions
=====================================
1. To build Web Console All in One archive from sources run the following command in Ignite project root folder:
    mvn clean package \
        -Plgpl,web-console,release \
        -pl :ignite-web-console -am \
        -DskipTests -DskipClientDocs -Dmaven.javadoc.skip=true
2. Assembled archive can be found here:  `modules/web-console/target/ignite-web-console-*.zip`.

Web Console Docker Image Build Instructions
=====================================
Install Docker (version >=17.05) using instructions from https://www.docker.com/community-edition.

1. To build Web Console All in One archive from sources run the following command in Ignite project root folder:
    mvn clean package \
        -Plgpl,web-console,release \
        -pl :ignite-web-console -am \
        -DskipTests -DskipClientDocs -Dmaven.javadoc.skip=true

2. Go to Web Console Docker module directory and copy Web Console All in One archive:

    cd modules/web-console/docker/console
    cp -rfv ../../target/ignite-web-console-*.zip ./

3. Unpack Web Console All in One binary archive

    unzip ignite-web-console-*.zip

4. Build backend docker image

    docker build . -f backend/Dockerfile -t gridgain/web-console-backend[:<version>]

5. Build frontend docker image

    docker build . -f frontend/Dockerfile -t gridgain/web-console-frontend[:<version>]

6. Clean up

    rm -rf ignite-web-console-*

The image will be available in local docker registry (can be seen by calling the `docker images` command)


Web Console Run In Development Mode
==========================================
1. Install Node.js (version >=8.0.0) using installer from https://nodejs.org/en/download/current for your OS.
2. Launch backend module `modules/web-console/web-console-server`

    From your IDE https://docs.spring.io/spring-boot/docs/current/reference/html/using-boot-running-your-application.html#using-boot-running-from-an-ide

   or run following maven commands in terminal:

    mvn clean install -Plgpl,web-console -pl :ignite-web-console-server -am  -DskipTests -DskipClientDocs -Dmaven.javadoc.skip=true

    mvn exec:java -Plgpl,web-console -pl :ignite-web-console-server -Dexec.mainClass="org.apache.ignite.console.Application" -Dexec.classpathScope=test  -Dorg.eclipse.jetty.util.log.class="org.eclipse.jetty.util.log.StdErrLog" -DIGNITE_HOME=$(pwd)/work

3. In new terminal change directory to 'modules/web-console/frontend'.
  If needed run "npm install" (if dependencies changed) and start webpack in development mode "npm start".
4. Open in browser: http://localhost:9000

End-to-end tests In Development Mode
==========================================
E2E tests are performed with TestCafe framework - https://testcafe.devexpress.com

During developing tests you may need to run some particular tests without running all suites.
For this case you need to run environment and test separately.

To perform it do the following:
1. Optionally install Chromium (https://www.chromium.org/getting-involved/download-chromium or https://chromium.woolyss.com).
   You may use any other browser, just set 'BROWSERS' constant in 'modules/web-console/e2e/testcafe/index.js'.
2. Start backend environment. NOTE: To disable CSRF protection and enable additional endpoints you'll need to set environment variable SPRING_PROFILES_ACTIVE to test.
3. Start frontend environment which should proxy REST request to backend.
4. In terminal change directory to 'modules/web-console/e2e/testcafe' folder and execute: "npm install".
5. Setup environment variable APP_URL which should point to frontend URL (Default: http://localhost:9001)
6. To start tests execute: "npm run test".

Please refer to TestCafe documentation at https://devexpress.github.io/testcafe/documentation/test-api/test-code-structure.html#skipping-tests
 upon how to specify which particular test should be run or skipped.

End-to-end tests using docker-compose
==========================================

To launch tests on your local machine using docker-compose you will need:
1. Install docker and docker-compose.
2  Build Web Console archive and prepare it for build docker images.
 Refer to `Web Console Docker Image Build Instructions` section for instructions and execute steps 1-3.
3. Execute in terminal: "docker-compose up --build --abort-on-container-exit" in directory "modules/web-console/e2e".
4. If you need to cleanup docker container then execute "docker-compose down".

You can modify the following params in docker-compose.xml:
- APP_URL - URL for test environment applications. Default: http://localhost:9001
- REPORTER - Which "TestCafe" reporter to use. Set to 'teamcity' to use Teamcity reporter. Default: "spec" (native Testcafe reporter)

Frontend unit tests
==========================================
Unit tests are performed with Mocha framework - https://mochajs.org

To launch tests on your local machine you will need:
1. In new terminal change directory to 'modules/web-console/frontend' folder and execute: "npm install".
2. To start test environment and tests execute: "npm run test".

Web Console backend settings
==========================================
You can use properties files, YAML files, environment variables to externalize configuration.

Properties are considered in the following order:
1. Java System properties (System.getProperties()).
2. OS environment variables.
3. application.properties and YAML variants in /config subdirectory of the current work directory or in current work directory.
   YAML format description can be found here https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html#boot-features-external-config-yaml

Various properties can be specified inside your application.properties file, inside your application.yml file, or Java System properties.
This appendix provides a list of common Spring Boot properties and references to the underlying classes that consume them:

# Sign up configuration.
account.signup.enabled=true # Enable self registration
account.activation.enabled=false # Enable account activation
account.activation.timeout=1800000 # Activation timeout(milliseconds)
account.activation.sendTimeout=180000 # Activation send email throttle (milliseconds)

# Embedded server configuration.
server.address=0.0.0.0 # Network address to which the Web Console should bind.
server.port=3000 # Web Console HTTP port.

Web Console backend settings for sending emails using GMail
==========================================

spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=<login user to smtp server>
spring.mail.password=<login password to smtp server>
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true
