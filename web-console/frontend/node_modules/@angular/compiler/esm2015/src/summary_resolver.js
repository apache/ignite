export class SummaryResolver {
}
export class JitSummaryResolver {
    constructor() {
        this._summaries = new Map();
    }
    isLibraryFile() { return false; }
    toSummaryFileName(fileName) { return fileName; }
    fromSummaryFileName(fileName) { return fileName; }
    resolveSummary(reference) {
        return this._summaries.get(reference) || null;
    }
    getSymbolsOf() { return []; }
    getImportAs(reference) { return reference; }
    getKnownModuleName(fileName) { return null; }
    addSummary(summary) { this._summaries.set(summary.symbol, summary); }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtbWFyeV9yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zdW1tYXJ5X3Jlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWdCQSxNQUFNLE9BQWdCLGVBQWU7Q0FTcEM7QUFFRCxNQUFNLE9BQU8sa0JBQWtCO0lBQS9CO1FBQ1UsZUFBVSxHQUFHLElBQUksR0FBRyxFQUF1QixDQUFDO0lBWXRELENBQUM7SUFWQyxhQUFhLEtBQWMsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzFDLGlCQUFpQixDQUFDLFFBQWdCLElBQVksT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLG1CQUFtQixDQUFDLFFBQWdCLElBQVksT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQ2xFLGNBQWMsQ0FBQyxTQUFlO1FBQzVCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDO0lBQ2hELENBQUM7SUFDRCxZQUFZLEtBQWEsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JDLFdBQVcsQ0FBQyxTQUFlLElBQVUsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDO0lBQ3hELGtCQUFrQixDQUFDLFFBQWdCLElBQUksT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JELFVBQVUsQ0FBQyxPQUFzQixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3JGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAqL1xuaW1wb3J0IHtDb21waWxlVHlwZVN1bW1hcnl9IGZyb20gJy4vY29tcGlsZV9tZXRhZGF0YSc7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4vY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VtbWFyeTxUPiB7XG4gIHN5bWJvbDogVDtcbiAgbWV0YWRhdGE6IGFueTtcbiAgdHlwZT86IENvbXBpbGVUeXBlU3VtbWFyeTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFN1bW1hcnlSZXNvbHZlcjxUPiB7XG4gIGFic3RyYWN0IGlzTGlicmFyeUZpbGUoZmlsZU5hbWU6IHN0cmluZyk6IGJvb2xlYW47XG4gIGFic3RyYWN0IHRvU3VtbWFyeUZpbGVOYW1lKGZpbGVOYW1lOiBzdHJpbmcsIHJlZmVycmluZ1NyY0ZpbGVOYW1lOiBzdHJpbmcpOiBzdHJpbmc7XG4gIGFic3RyYWN0IGZyb21TdW1tYXJ5RmlsZU5hbWUoZmlsZU5hbWU6IHN0cmluZywgcmVmZXJyaW5nTGliRmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZztcbiAgYWJzdHJhY3QgcmVzb2x2ZVN1bW1hcnkocmVmZXJlbmNlOiBUKTogU3VtbWFyeTxUPnxudWxsO1xuICBhYnN0cmFjdCBnZXRTeW1ib2xzT2YoZmlsZVBhdGg6IHN0cmluZyk6IFRbXXxudWxsO1xuICBhYnN0cmFjdCBnZXRJbXBvcnRBcyhyZWZlcmVuY2U6IFQpOiBUO1xuICBhYnN0cmFjdCBnZXRLbm93bk1vZHVsZU5hbWUoZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZ3xudWxsO1xuICBhYnN0cmFjdCBhZGRTdW1tYXJ5KHN1bW1hcnk6IFN1bW1hcnk8VD4pOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgSml0U3VtbWFyeVJlc29sdmVyIGltcGxlbWVudHMgU3VtbWFyeVJlc29sdmVyPFR5cGU+IHtcbiAgcHJpdmF0ZSBfc3VtbWFyaWVzID0gbmV3IE1hcDxUeXBlLCBTdW1tYXJ5PFR5cGU+PigpO1xuXG4gIGlzTGlicmFyeUZpbGUoKTogYm9vbGVhbiB7IHJldHVybiBmYWxzZTsgfVxuICB0b1N1bW1hcnlGaWxlTmFtZShmaWxlTmFtZTogc3RyaW5nKTogc3RyaW5nIHsgcmV0dXJuIGZpbGVOYW1lOyB9XG4gIGZyb21TdW1tYXJ5RmlsZU5hbWUoZmlsZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7IHJldHVybiBmaWxlTmFtZTsgfVxuICByZXNvbHZlU3VtbWFyeShyZWZlcmVuY2U6IFR5cGUpOiBTdW1tYXJ5PFR5cGU+fG51bGwge1xuICAgIHJldHVybiB0aGlzLl9zdW1tYXJpZXMuZ2V0KHJlZmVyZW5jZSkgfHwgbnVsbDtcbiAgfVxuICBnZXRTeW1ib2xzT2YoKTogVHlwZVtdIHsgcmV0dXJuIFtdOyB9XG4gIGdldEltcG9ydEFzKHJlZmVyZW5jZTogVHlwZSk6IFR5cGUgeyByZXR1cm4gcmVmZXJlbmNlOyB9XG4gIGdldEtub3duTW9kdWxlTmFtZShmaWxlTmFtZTogc3RyaW5nKSB7IHJldHVybiBudWxsOyB9XG4gIGFkZFN1bW1hcnkoc3VtbWFyeTogU3VtbWFyeTxUeXBlPikgeyB0aGlzLl9zdW1tYXJpZXMuc2V0KHN1bW1hcnkuc3ltYm9sLCBzdW1tYXJ5KTsgfVxufVxuIl19