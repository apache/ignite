//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"lifecycle_hooks.js","sourceRoot":"","sources":["../../../../../../../../../../../../packages/core/src/interface/lifecycle_hooks.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {SimpleChanges} from './simple_change';\n\n\n/**\n * @description\n * A lifecycle hook that is called when any data-bound property of a directive changes.\n * Define an `ngOnChanges()` method to handle the changes.\n *\n * @see `DoCheck`\n * @see `OnInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define an on-changes handler for an input property.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnChanges'}\n *\n * @publicApi\n */\nexport interface OnChanges {\n  /**\n   * A callback method that is invoked immediately after the\n   * default change detector has checked data-bound properties\n   * if at least one has changed, and before the view and content\n   * children are checked.\n   * @param changes The changed properties.\n   */\n  ngOnChanges(changes: SimpleChanges): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has initialized\n * all data-bound properties of a directive.\n * Define an `ngOnInit()` method to handle any additional initialization tasks.\n *\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnInit'}\n *\n * @publicApi\n */\nexport interface OnInit {\n  /**\n   * A callback method that is invoked immediately after the\n   * default change detector has checked the directive's\n   * data-bound properties for the first time,\n   * and before any of the view or content children have been checked.\n   * It is invoked only once when the directive is instantiated.\n   */\n  ngOnInit(): void;\n}\n\n/**\n * A lifecycle hook that invokes a custom change-detection function for a directive,\n * in addition to the check performed by the default change-detector.\n *\n * The default change-detection algorithm looks for differences by comparing\n * bound-property values by reference across change detection runs. You can use this\n * hook to check for and respond to changes by some other means.\n *\n * When the default change detector detects changes, it invokes `ngOnChanges()` if supplied,\n * regardless of whether you perform additional change detection.\n * Typically, you should not use both `DoCheck` and `OnChanges` to respond to\n * changes on the same input.\n *\n * @see `OnChanges`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to invoke it own change-detection cycle.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='DoCheck'}\n *\n * @publicApi\n */\nexport interface DoCheck {\n  /**\n     * A callback method that performs change-detection, invoked\n     * after the default change-detector runs.\n     * See `KeyValueDiffers` and `IterableDiffers` for implementing\n     * custom change checking for collections.\n     *\n     */\n  ngDoCheck(): void;\n}\n\n/**\n * A lifecycle hook that is called when a directive, pipe, or service is destroyed.\n * Use for any custom cleanup that needs to occur when the\n * instance is destroyed.\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface\n * to define its own custom clean-up method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='OnDestroy'}\n *\n * @publicApi\n */\nexport interface OnDestroy {\n  /**\n   * A callback method that performs custom clean-up, invoked immediately\n   * after a directive, pipe, or service instance is destroyed.\n   */\n  ngOnDestroy(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * all content of a directive.\n * Define an `ngAfterContentInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterViewInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own content initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentInit'}\n *\n * @publicApi\n */\nexport interface AfterContentInit {\n  /**\n   * A callback method that is invoked immediately after\n   * Angular has completed initialization of all of the directive's\n   * content.\n   * It is invoked only once when the directive is instantiated.\n   */\n  ngAfterContentInit(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking all content of a directive.\n *\n * @see `AfterViewChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterContentChecked'}\n *\n * @publicApi\n */\nexport interface AfterContentChecked {\n  /**\n   * A callback method that is invoked immediately after the\n   * default change detector has completed checking all of the directive's\n   * content.\n   */\n  ngAfterContentChecked(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after Angular has fully initialized\n * a component's view.\n * Define an `ngAfterViewInit()` method to handle any additional initialization tasks.\n *\n * @see `OnInit`\n * @see `AfterContentInit`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own view initialization method.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewInit'}\n *\n * @publicApi\n */\nexport interface AfterViewInit {\n  /**\n   * A callback method that is invoked immediately after\n   * Angular has completed initialization of a component's view.\n   * It is invoked only once when the view is instantiated.\n   *\n   */\n  ngAfterViewInit(): void;\n}\n\n/**\n * @description\n * A lifecycle hook that is called after the default change detector has\n * completed checking a component's view for changes.\n *\n * @see `AfterContentChecked`\n * @see [Lifecycle Hooks](guide/lifecycle-hooks#onchanges) guide\n *\n * @usageNotes\n * The following snippet shows how a component can implement this interface to\n * define its own after-check functionality.\n *\n * {@example core/ts/metadata/lifecycle_hooks_spec.ts region='AfterViewChecked'}\n *\n * @publicApi\n */\nexport interface AfterViewChecked {\n  /**\n   * A callback method that is invoked immediately after the\n   * default change detector has completed one change-check cycle\n   * for a component's view.\n   */\n  ngAfterViewChecked(): void;\n}\n"]}