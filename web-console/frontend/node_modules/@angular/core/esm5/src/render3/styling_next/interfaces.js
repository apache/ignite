//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"interfaces.js","sourceRoot":"","sources":["../../../../../../../../../../../packages/core/src/render3/styling_next/interfaces.ts"],"names":[],"mappings":"","sourcesContent":["/**\n* @license\n* Copyright Google Inc. All Rights Reserved.\n*\n* Use of this source code is governed by an MIT-style license that can be\n* found in the LICENSE file at https://angular.io/license\n*/\nimport {StyleSanitizeFn} from '../../sanitization/style_sanitizer';\nimport {ProceduralRenderer3, RElement, Renderer3} from '../interfaces/renderer';\nimport {LView} from '../interfaces/view';\n\n/**\n * --------\n *\n * This file contains the core interfaces for styling in Angular.\n *\n * To learn more about the algorithm see `TStylingContext`.\n *\n * --------\n */\n\n/**\n * A static-level representation of all style or class bindings/values\n * associated with a `TNode`.\n *\n * The `TStylingContext` unites all template styling bindings (i.e.\n * `[class]` and `[style]` bindings) as well as all host-level\n * styling bindings (for components and directives) together into\n * a single manifest. It is used each time there are one or more\n * styling bindings present for an element.\n *\n * The styling context is stored on a `TNode` on and there are\n * two instances of it: one for classes and another for styles.\n *\n * ```typescript\n * tNode.styles = [ ... a context only for styles ... ];\n * tNode.classes = [ ... a context only for classes ... ];\n * ```\n *\n * `tNode.styles` and `tNode.classes` can be an instance of the following:\n *\n * ```typescript\n * tNode.styles = null; // no static styling or styling bindings active\n * tNode.styles = StylingMapArray; // only static values present (e.g. `<div style=\"width:200\">`)\n * tNode.styles = TStylingContext; // one or more styling bindings present (e.g. `<div\n * [style.width]>`)\n * ```\n *\n * Both `tNode.styles` and `tNode.classes` are instantiated when anything\n * styling-related is active on an element. They are first created from\n * from the any of the element-level instructions (e.g. `element`,\n * `elementStart`, `elementHostAttrs`). When any static style/class\n * values are encountered they are registered on the `tNode.styles`\n * and `tNode.classes` data-structures. By default (when any static\n * values are encountered) the `tNode.styles` or `tNode.classes` values\n * are instances of a `StylingMapArray`. Only when style/class bindings\n * are detected then that styling map is converted into an instance of\n * `TStylingContext`.\n *\n * Due to the fact the the `TStylingContext` is stored on a `TNode`\n * this means that all data within the context is static. Instead of\n * storing actual styling binding values, the lView binding index values\n * are stored within the context. (static nature means it is more compact.)\n *\n * ```typescript\n * // <div [class.active]=\"c\"  // lView binding index = 20\n * //      [style.width]=\"x\"   // lView binding index = 21\n * //      [style.height]=\"y\"> // lView binding index = 22\n * tNode.stylesContext = [\n *   [], // initial values array\n *   0, // the context config value\n *\n *   0b001, // guard mask for width\n *   2, // total entries for width\n *   'width', // the property name\n *   21, // the binding location for the \"x\" binding in the lView\n *   null,\n *\n *   0b010, // guard mask for height\n *   2, // total entries for height\n *   'height', // the property name\n *   22, // the binding location for the \"y\" binding in the lView\n *   null,\n * ];\n *\n * tNode.classesContext = [\n *   [], // initial values array\n *   0, // the context config value\n *\n *   0b001, // guard mask for active\n *   2, // total entries for active\n *   'active', // the property name\n *   20, // the binding location for the \"c\" binding in the lView\n *   null,\n * ];\n * ```\n *\n * Entry value present in an entry (called a tuple) within the\n * styling context is as follows:\n *\n * ```typescript\n * context = [\n *   CONFIG, // the styling context config value\n *   //...\n *   guardMask,\n *   totalEntries,\n *   propName,\n *   bindingIndices...,\n *   defaultValue\n * ];\n * ```\n *\n * Below is a breakdown of each value:\n *\n * - **guardMask**:\n *   A numeric value where each bit represents a binding index\n *   location. Each binding index location is assigned based on\n *   a local counter value that increments each time an instruction\n *   is called:\n *\n * ```\n * <div [style.width]=\"x\"   // binding index = 21 (counter index = 0)\n *      [style.height]=\"y\"> // binding index = 22 (counter index = 1)\n * ```\n *\n *   In the example code above, if the `width` value where to change\n *   then the first bit in the local bit mask value would be flipped\n *   (and the second bit for when `height`).\n *\n *   If and when there are more than 32 binding sources in the context\n *   (more than 32 `[style/class]` bindings) then the bit masking will\n *   overflow and we are left with a situation where a `-1` value will\n *   represent the bit mask. Due to the way that JavaScript handles\n *   negative values, when the bit mask is `-1` then all bits within\n *   that value will be automatically flipped (this is a quick and\n *   efficient way to flip all bits on the mask when a special kind\n *   of caching scenario occurs or when there are more than 32 bindings).\n *\n * - **totalEntries**:\n *   Each property present in the contains various binding sources of\n *   where the styling data could come from. This includes template\n *   level bindings, directive/component host bindings as well as the\n *   default value (or static value) all writing to the same property.\n *   This value depicts how many binding source entries exist for the\n *   property.\n *\n *   The reason why the totalEntries value is needed is because the\n *   styling context is dynamic in size and it's not possible\n *   for the flushing or update algorithms to know when and where\n *   a property starts and ends without it.\n *\n * - **propName**:\n *   The CSS property name or class name (e.g `width` or `active`).\n *\n * - **bindingIndices...**:\n *   A series of numeric binding values that reflect where in the\n *   lView to find the style/class values associated with the property.\n *   Each value is in order in terms of priority (templates are first,\n *   then directives and then components). When the context is flushed\n *   and the style/class values are applied to the element (this happens\n *   inside of the `stylingApply` instruction) then the flushing code\n *   will keep checking each binding index against the associated lView\n *   to find the first style/class value that is non-null.\n *\n * - **defaultValue**:\n *   This is the default that will always be applied to the element if\n *   and when all other binding sources return a result that is null.\n *   Usually this value is null but it can also be a static value that\n *   is intercepted when the tNode is first constructured (e.g.\n *   `<div style=\"width:200px\">` has a default value of `200px` for\n *   the `width` property).\n *\n * Each time a new binding is encountered it is registered into the\n * context. The context then is continually updated until the first\n * styling apply call has been called (this is triggered by the\n * `stylingApply()` instruction for the active element).\n *\n * # How Styles/Classes are Rendered\n * Each time a styling instruction (e.g. `[class.name]`, `[style.prop]`,\n * etc...) is executed, the associated `lView` for the view is updated\n * at the current binding location. Also, when this happens, a local\n * counter value is incremented. If the binding value has changed then\n * a local `bitMask` variable is updated with the specific bit based\n * on the counter value.\n *\n * Below is a lightweight example of what happens when a single style\n * property is updated (i.e. `<div [style.prop]=\"val\">`):\n *\n * ```typescript\n * function updateStyleProp(prop: string, value: string) {\n *   const lView = getLView();\n *   const bindingIndex = BINDING_INDEX++;\n *   const indexForStyle = localStylesCounter++;\n *   if (lView[bindingIndex] !== value) {\n *     lView[bindingIndex] = value;\n *     localBitMaskForStyles |= 1 << indexForStyle;\n *   }\n * }\n * ```\n *\n * ## The Apply Algorithm\n * As explained above, each time a binding updates its value, the resulting\n * value is stored in the `lView` array. These styling values have yet to\n * be flushed to the element.\n *\n * Once all the styling instructions have been evaluated, then the styling\n * context(s) are flushed to the element. When this happens, the context will\n * be iterated over (property by property) and each binding source will be\n * examined and the first non-null value will be applied to the element.\n *\n * Let's say that we the following template code:\n *\n * ```html\n * <div [style.width]=\"w1\" dir-that-set-width=\"w2\"></div>\n * ```\n *\n * There are two styling bindings in the code above and they both write\n * to the `width` property. When styling is flushed on the element, the\n * algorithm will try and figure out which one of these values to write\n * to the element.\n *\n * In order to figure out which value to apply, the following\n * binding prioritization is adhered to:\n *\n *   1. First template-level styling bindings are applied (if present).\n *      This includes things like `[style.width]` and `[class.active]`.\n *\n *   2. Second are styling-level host bindings present in directives.\n *      (if there are sub/super directives present then the sub directives\n *      are applied first).\n *\n *   3. Third are styling-level host bindings present in components.\n *      (if there are sub/super components present then the sub directives\n *      are applied first).\n *\n * This means that in the code above the styling binding present in the\n * template is applied first and, only if its falsy, then the directive\n * styling binding for width will be applied.\n *\n * ### What about map-based styling bindings?\n * Map-based styling bindings are activated when there are one or more\n * `[style]` and/or `[class]` bindings present on an element. When this\n * code is activated, the apply algorithm will iterate over each map\n * entry and apply each styling value to the element with the same\n * prioritization rules as above.\n *\n * For the algorithm to apply styling values efficiently, the\n * styling map entries must be applied in sync (property by property)\n * with prop-based bindings. (The map-based algorithm is described\n * more inside of the `render3/styling_next/map_based_bindings.ts` file.)\n *\n * ## Sanitization\n * Sanitization is used to prevent invalid style values from being applied to\n * the element.\n *\n * It is enabled in two cases:\n *\n *   1. The `styleSanitizer(sanitizerFn)` instruction was called (just before any other\n *      styling instructions are run).\n *\n *   2. The component/directive `LView` instance has a sanitizer object attached to it\n *      (this happens when `renderComponent` is executed with a `sanitizer` value or\n *      if the ngModule contains a sanitizer provider attached to it).\n *\n * If and when sanitization is active then all property/value entries will be evaluated\n * through the active sanitizer before they are applied to the element (or the styling\n * debug handler).\n *\n * If a `Sanitizer` object is used (via the `LView[SANITIZER]` value) then that object\n * will be used for every property.\n *\n * If a `StyleSanitizerFn` function is used (via the `styleSanitizer`) then it will be\n * called in two ways:\n *\n *   1. property validation mode: this will be called early to mark whether a property\n *      should be sanitized or not at during the flushing stage.\n *\n *   2. value sanitization mode: this will be called during the flushing stage and will\n *      run the sanitizer function against the value before applying it to the element.\n *\n * If sanitization returns an empty value then that empty value will be applied\n * to the element.\n */\nexport interface TStylingContext extends\n    Array<number|string|number|boolean|null|StylingMapArray|{}> {\n  /** Initial value position for static styles */\n  [TStylingContextIndex.InitialStylingValuePosition]: StylingMapArray;\n\n  /** Configuration data for the context */\n  [TStylingContextIndex.ConfigPosition]: TStylingConfigFlags;\n\n  /** Temporary value used to track directive index entries until\n     the old styling code is fully removed. The reason why this\n     is required is to figure out which directive is last and,\n     when encountered, trigger a styling flush to happen */\n  [TStylingContextIndex.LastDirectiveIndexPosition]: number;\n\n  /** The bit guard value for all map-based bindings on an element */\n  [TStylingContextIndex.MapBindingsBitGuardPosition]: number;\n\n  /** The total amount of map-based bindings present on an element */\n  [TStylingContextIndex.MapBindingsValuesCountPosition]: number;\n\n  /** The prop value for map-based bindings (there actually isn't a\n   * value at all, but this is just used in the context to avoid\n   * having any special code to update the binding information for\n   * map-based entries). */\n  [TStylingContextIndex.MapBindingsPropPosition]: string;\n}\n\n/**\n * A series of flags used to configure the config value present within a\n * `TStylingContext` value.\n */\nexport const enum TStylingConfigFlags {\n  /**\n   * The initial state of the styling context config\n   */\n  Initial = 0b0,\n\n  /**\n   * A flag which marks the context as being locked.\n   *\n   * The styling context is constructed across an element template\n   * function as well as any associated hostBindings functions. When\n   * this occurs, the context itself is open to mutation and only once\n   * it has been flushed once then it will be locked for good (no extra\n   * bindings can be added to it).\n   */\n  Locked = 0b1,\n\n  /**\n   * Whether or not to store the state between updates in a global storage map.\n   *\n   * This flag helps the algorithm avoid storing all state values temporarily in\n   * a storage map (that lives in `state.ts`). The flag is only flipped to true if\n   * and when an element contains style/class bindings that exist both on the\n   * template-level as well as within host bindings on the same element. This is a\n   * rare case, and a storage map is required so that the state values can be restored\n   * between the template code running and the host binding code executing.\n   */\n  PersistStateValues = 0b10,\n\n  /** A Mask of all the configurations */\n  Mask = 0b11,\n\n  /** Total amount of configuration bits used */\n  TotalBits = 2,\n}\n\n/**\n * An index of position and offset values used to natigate the `TStylingContext`.\n */\nexport const enum TStylingContextIndex {\n  InitialStylingValuePosition = 0,\n  ConfigPosition = 1,\n  LastDirectiveIndexPosition = 2,\n\n  // index/offset values for map-based entries (i.e. `[style]`\n  // and `[class]` bindings).\n  MapBindingsPosition = 3,\n  MapBindingsBitGuardPosition = 3,\n  MapBindingsValuesCountPosition = 4,\n  MapBindingsPropPosition = 5,\n  MapBindingsBindingsStartPosition = 6,\n\n  // each tuple entry in the context\n  // (mask, count, prop, ...bindings||default-value)\n  ConfigAndGuardOffset = 0,\n  ValuesCountOffset = 1,\n  PropOffset = 2,\n  BindingsStartOffset = 3,\n  MinTupleLength = 4,\n}\n\n/**\n * A series of flags used for each property entry within the `TStylingContext`.\n */\nexport const enum TStylingContextPropConfigFlags {\n  Default = 0b0,\n  SanitizationRequired = 0b1,\n  TotalBits = 1,\n  Mask = 0b1,\n}\n\n/**\n * A function used to apply or remove styling from an element for a given property.\n */\nexport interface ApplyStylingFn {\n  (renderer: Renderer3|ProceduralRenderer3|null, element: RElement, prop: string,\n   value: string|null, bindingIndex?: number|null): void;\n}\n\n/**\n * Runtime data type that is used to store binding data referenced from the `TStylingContext`.\n *\n * Because `LView` is just an array with data, there is no reason to\n * special case `LView` everywhere in the styling algorithm. By allowing\n * this data type to be an array that contains various scalar data types,\n * an instance of `LView` doesn't need to be constructed for tests.\n */\nexport type LStylingData = LView | (string | number | boolean | null)[];\n\n/**\n * Array-based representation of a key/value array.\n *\n * The format of the array is \"property\", \"value\", \"property2\",\n * \"value2\", etc...\n *\n * The first value in the array is reserved to store the instance\n * of the key/value array that was used to populate the property/\n * value entries that take place in the remainder of the array.\n */\nexport interface StylingMapArray extends Array<{}|string|number|null> {\n  [StylingMapArrayIndex.RawValuePosition]: {}|string|null;\n}\n\n/**\n * An index of position and offset points for any data stored within a `StylingMapArray` instance.\n */\nexport const enum StylingMapArrayIndex {\n  /** The location of the raw key/value map instance used last to populate the array entries */\n  RawValuePosition = 0,\n\n  /** Where the values start in the array */\n  ValuesStartPosition = 1,\n\n  /** The size of each property/value entry */\n  TupleSize = 2,\n\n  /** The offset for the property entry in the tuple */\n  PropOffset = 0,\n\n  /** The offset for the value entry in the tuple */\n  ValueOffset = 1,\n}\n\n/**\n * Used to apply/traverse across all map-based styling entries up to the provided `targetProp`\n * value.\n *\n * When called, each of the map-based `StylingMapArray` entries (which are stored in\n * the provided `LStylingData` array) will be iterated over. Depending on the provided\n * `mode` value, each prop/value entry may be applied or skipped over.\n *\n * If `targetProp` value is provided the iteration code will stop once it reaches\n * the property (if found). Otherwise if the target property is not encountered then\n * it will stop once it reaches the next value that appears alphabetically after it.\n *\n * If a `defaultValue` is provided then it will be applied to the element only if the\n * `targetProp` property value is encountered and the value associated with the target\n * property is `null`. The reason why the `defaultValue` is needed is to avoid having the\n * algorithm apply a `null` value and then apply a default value afterwards (this would\n * end up being two style property writes).\n *\n * @returns whether or not the target property was reached and its value was\n *  applied to the element.\n */\nexport interface SyncStylingMapsFn {\n  (context: TStylingContext, renderer: Renderer3|ProceduralRenderer3|null, element: RElement,\n   data: LStylingData, applyStylingFn: ApplyStylingFn, sanitizer: StyleSanitizeFn|null,\n   mode: StylingMapsSyncMode, targetProp?: string|null, defaultValue?: string|null): boolean;\n}\n\n/**\n * Used to direct how map-based values are applied/traversed when styling is flushed.\n */\nexport const enum StylingMapsSyncMode {\n  /** Only traverse values (no prop/value styling entries get applied) */\n  TraverseValues = 0b000,\n\n  /** Apply every prop/value styling entry to the element */\n  ApplyAllValues = 0b001,\n\n  /** Only apply the target prop/value entry */\n  ApplyTargetProp = 0b010,\n\n  /** Skip applying the target prop/value entry */\n  SkipTargetProp = 0b100,\n}\n"]}