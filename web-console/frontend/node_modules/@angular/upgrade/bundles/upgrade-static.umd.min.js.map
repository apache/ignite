{"version":3,"sources":["packages/upgrade/upgrade-static.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","upgrade","static","core","platformBrowser","this","noNg","Error","noNgElement","cleanData","angular","bootstrap","element","injector","version","undefined","resumeBootstrap","getTestability","window","hasOwnProperty","_a","setAngularJSGlobal","getAngularJSGlobal","module_","prefix","dependencies","e","nodes","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","__metadata","metadataKey","metadataValue","Reflect","metadata","__read","o","n","m","Symbol","iterator","r","i","call","ar","next","done","push","value","error","__spread","arguments","length","concat","$COMPILE","$CONTROLLER","$INJECTOR","$SCOPE","DOWNGRADED_MODULE_COUNT_KEY","INJECTOR_KEY","UPGRADE_APP_TYPE_KEY","REQUIRE_INJECTOR","PropertyBinding","prop","attr","parseBinding","prototype","bracketAttr","parenAttr","bracketParenAttr","capitalAttr","charAt","toUpperCase","substr","onAttr","bindAttr","bindonAttr","DIRECTIVE_PREFIX_REGEXP","DIRECTIVE_SPECIAL_CHARS_REGEXP","controllerKey","name","getTypeName","type","overriddenName","toString","split","getDowngradedModuleCount","$injector","has","get","getUpgradeAppType","isFunction","validateInjectionKey","downgradedModule","injectionKey","attemptedAction","upgradeAppType","downgradedModuleCount","_matches","INITIAL_VALUE","__UNINITIALIZED__","DowngradeComponentAdapter","attrs","scope","ngModel","parentInjector","$compile","$parse","componentFactory","wrapCallback","implementsOnChanges","inputChangeCount","inputChanges","componentScope","$new","compileContents","_this","compiledProjectableNodes","linkFns","groupProjectableNodes","map","empty","forEach","linkFn","clone","append","createComponent","projectableNodes","childInjector","Injector","create","providers","provide","useValue","parent","componentRef","viewChangeDetector","ChangeDetectorRef","changeDetector","changeDetectorRef","component","instance","testability","Testability","TestabilityRegistry","registerApplication","location","nativeElement","hookupNgModel","supportsNgModel","writeValue","registerOnChange","$render","$viewValue","$setViewValue","bind","registerOnTouched","$setTouched","setupInputs","manuallyAttachView","propagateDigest","inputs","_loop_1","prevValue","input","propName","templateName","expr","observeFn_1","currValue","strictEquals","val1","val2","updateInput","$observe","unwatch_1","this_1","$watch","watchFn","detectChanges","componentType","ngOnChanges","markForCheck","unwatch_2","ApplicationRef","attachView","hostView","setupOutputs","outputs","j","output","substring","subscribeToOutput","isAssignment","getter","setter","assign","emitter","subscribe","v","$event","registerCleanup","testabilityRegistry","destroyComponentRef","destroy","destroyed","on","$destroy","$on","unregisterApplication","getInjector","SimpleChange","groupNodesBySelector","ngContentSelectors","ii","jj","node","ngContentIndex","findMatchingNgContentIndex","contents","ngContentIndices","wildcardNgContentIndex","selector","matchesSelector","sort","el","elProto","Element","matches","mozMatchesSelector","msMatchesSelector","oMatchesSelector","webkitMatchesSelector","nodeType","Node","ELEMENT_NODE","SyncPromise","resolved","callbacks","all","valuesOrPromises","aggrPromise","resolvedCount","results","resolve","idx","isThenable","obj","then","callback","ParentInjectorPromise","_super","injectorKey","data","__extends","__","constructor","VERSION","Version","tempInjectorRef","setTempInjectorRef","injectorFactory","rootScopeFactory","compileFactory","parseFactory","angular1Providers","useFactory","deps","NgAdapterInjector","modInjector","token","notFoundValue","ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR","moduleUid","identity","x","REQUIRE_PREFIX_RE","UpgradeHelper","elementRef","directive","$controller","$element","getDirective","directives","compile","link","notSupported","replace","terminal","getTemplate","fetchRemoteTemplate","template","getOrCall","templateUrl","$templateCache_1","url_1","Promise","reject","$httpBackend","status","response","put","buildController","controllerType","$scope","controller","controllerAs","compileTemplate","compileHtml","onDestroy","controllerInstance","$onDestroy","querySelectorAll","prepareTransclusion","transclude","contentChildNodes","extractChildNodes","attachChildrenFn","cloneAttachFn","$template","slots_1","slotMap_1","filledSlots_1","keys","slotName","optional","directiveNormalize","_","letter","nodeName","toLowerCase","filter","cloneAttach","$$slots","TEXT_NODE","nodeValue","resolveAndBindRequiredControllers","directiveRequire","getDirectiveRequire","requiredControllers","resolveRequire","bindToController","isMap","requiredControllersMap_1","key","html","innerHTML","childNodes","childNode","firstChild","removeChild","match","isArray","req","value_1","inheritType","name_1","isOptional","searchParents","startOnParent","ctrlKey","elem","inheritedData","property","args","_i","apply","feature","INITIAL_VALUE$1","Bindings","twoWayBoundProperties","twoWayBoundLastValues","expressionBoundProperties","propertyToOutputMap","UpgradeComponent","helper","bindings","initializeBindings","$parentScope","$componentScope","initializeOutputs","ngOnInit","attachChildNodes","bindingDestination","bindOutputs","pendingChanges","forwardChanges","$onInit","$doCheck","callDoCheck","unregisterDoCheckWatcher","$parent","preLink","pre","postLink","post","parentBoundTranscludeFn","$postLink","changes","ngDoCheck","newValue","ɵlooseIdentical","emit","ngOnDestroy","btcIsObject","context","bindingType","json","JSON","stringify","EventEmitter","currentValue","$onChanges","UpgradeModule","ngZone","element$1","modules","config","INIT_MODULE_NAME","UPGRADE_MODULE_NAME","upgradeModule","constant","$provide","decorator","testabilityDelegate","originalWhenStable","whenStable","newWhenStable","ng2Testability","isStable","intervalDelegate","wrappedInterval","fn","delay","count","invokeApply","pass","runOutsideAngular","setTimeout","run","cancel","$rootScope","subscription","onMicrotaskEmpty","$$phase","isDevMode","console","warn","$evalAsync","$digest","unsubscribe","windowAngular","originalResumeBootstrap_1","ngZone_1","__decorate","decorators","target","desc","c","getOwnPropertyDescriptor","decorate","defineProperty","NgModule","NgZone","ɵangular_packages_upgrade_static_static_e","ɵangular_packages_upgrade_static_static_c","ɵangular_packages_upgrade_static_static_a","ɵangular_packages_upgrade_static_static_d","ɵangular_packages_upgrade_static_static_b","getAngularLib","setAngularLib","downgradeComponent","info","directiveFactory","isNgUpgradeLite","cb","isInAngularZone","hasMultipleDowngradedModules","restrict","required","moduleInjector","ranAsync","lazyModuleRefKey","lazyModuleRef","promise","doDowngrade","ComponentFactoryResolver","resolveComponentFactory","injectorPromise","facade","downgradeFn","pInjector","mInjector","_b","downgradeInjectable","injectableName","String","downgradeModule","moduleFactoryOrBootstrapFn","lazyModuleName","lazyInjectorKey","bootstrapFn","extraProviders","bootstrapModuleFactory","result","ref"],"mappings":"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","sourcesContent":["/**\n * @license Angular v8.2.14\n * (c) 2010-2019 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/platform-browser')) :\n    typeof define === 'function' && define.amd ? define('@angular/upgrade/static', ['exports', '@angular/core', '@angular/platform-browser'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.upgrade = global.ng.upgrade || {}, global.ng.upgrade.static = {}), global.ng.core, global.ng.platformBrowser));\n}(this, function (exports, core, platformBrowser) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function noNg() {\n        throw new Error('AngularJS v1.x is not loaded!');\n    }\n    var noNgElement = (function () { return noNg(); });\n    noNgElement.cleanData = noNg;\n    var angular = {\n        bootstrap: noNg,\n        module: noNg,\n        element: noNgElement,\n        injector: noNg,\n        version: undefined,\n        resumeBootstrap: noNg,\n        getTestability: noNg\n    };\n    try {\n        if (window.hasOwnProperty('angular')) {\n            angular = window.angular;\n        }\n    }\n    catch (_a) {\n        // ignore in CJS mode.\n    }\n    /**\n     * @deprecated Use `setAngularJSGlobal` instead.\n     *\n     * @publicApi\n     */\n    function setAngularLib(ng) {\n        setAngularJSGlobal(ng);\n    }\n    /**\n     * @deprecated Use `getAngularJSGlobal` instead.\n     *\n     * @publicApi\n     */\n    function getAngularLib() {\n        return getAngularJSGlobal();\n    }\n    /**\n     * Resets the AngularJS global.\n     *\n     * Used when AngularJS is loaded lazily, and not available on `window`.\n     *\n     * @publicApi\n     */\n    function setAngularJSGlobal(ng) {\n        angular = ng;\n    }\n    /**\n     * Returns the current AngularJS global.\n     *\n     * @publicApi\n     */\n    function getAngularJSGlobal() {\n        return angular;\n    }\n    var bootstrap = function (e, modules, config) {\n        return angular.bootstrap(e, modules, config);\n    };\n    // Do not declare as `module` to avoid webpack bug\n    // (see https://github.com/angular/angular/issues/30050).\n    var module_ = function (prefix, dependencies) {\n        return angular.module(prefix, dependencies);\n    };\n    var element = (function (e) { return angular.element(e); });\n    element.cleanData = function (nodes) { return angular.element.cleanData(nodes); };\n    var injector = function (modules, strictDi) { return angular.injector(modules, strictDi); };\n    var resumeBootstrap = function () { return angular.resumeBootstrap(); };\n    var getTestability = function (e) { return angular.getTestability(e); };\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n    Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\n    this file except in compliance with the License. You may obtain a copy of the\r\n    License at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\n    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\n    MERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\n    See the Apache Version 2.0 License for specific language governing permissions\r\n    and limitations under the License.\r\n    ***************************************************************************** */\r\n    /* global Reflect, Promise */\r\n\r\n    var extendStatics = function(d, b) {\r\n        extendStatics = Object.setPrototypeOf ||\r\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n        return extendStatics(d, b);\r\n    };\r\n\r\n    function __extends(d, b) {\r\n        extendStatics(d, b);\r\n        function __() { this.constructor = d; }\r\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n    }\r\n\r\n    var __assign = function() {\r\n        __assign = Object.assign || function __assign(t) {\r\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n                s = arguments[i];\r\n                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n            }\r\n            return t;\r\n        };\r\n        return __assign.apply(this, arguments);\r\n    };\r\n\r\n    function __rest(s, e) {\r\n        var t = {};\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n            t[p] = s[p];\r\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n                t[p[i]] = s[p[i]];\r\n        return t;\r\n    }\r\n\r\n    function __decorate(decorators, target, key, desc) {\r\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n    }\r\n\r\n    function __param(paramIndex, decorator) {\r\n        return function (target, key) { decorator(target, key, paramIndex); }\r\n    }\r\n\r\n    function __metadata(metadataKey, metadataValue) {\r\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n    }\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\r\n\r\n    function __exportStar(m, exports) {\r\n        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n    }\r\n\r\n    function __values(o) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n        if (m) return m.call(o);\r\n        return {\r\n            next: function () {\r\n                if (o && i >= o.length) o = void 0;\r\n                return { value: o && o[i++], done: !o };\r\n            }\r\n        };\r\n    }\r\n\r\n    function __read(o, n) {\r\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n        if (!m) return o;\r\n        var i = m.call(o), r, ar = [], e;\r\n        try {\r\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n        }\r\n        catch (error) { e = { error: error }; }\r\n        finally {\r\n            try {\r\n                if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n            }\r\n            finally { if (e) throw e.error; }\r\n        }\r\n        return ar;\r\n    }\r\n\r\n    function __spread() {\r\n        for (var ar = [], i = 0; i < arguments.length; i++)\r\n            ar = ar.concat(__read(arguments[i]));\r\n        return ar;\r\n    }\r\n\r\n    function __await(v) {\r\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n    }\r\n\r\n    function __asyncGenerator(thisArg, _arguments, generator) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n        function fulfill(value) { resume(\"next\", value); }\r\n        function reject(value) { resume(\"throw\", value); }\r\n        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n    }\r\n\r\n    function __asyncDelegator(o) {\r\n        var i, p;\r\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n    }\r\n\r\n    function __asyncValues(o) {\r\n        if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n        var m = o[Symbol.asyncIterator], i;\r\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n    }\r\n\r\n    function __makeTemplateObject(cooked, raw) {\r\n        if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n        return cooked;\r\n    };\r\n\r\n    function __importStar(mod) {\r\n        if (mod && mod.__esModule) return mod;\r\n        var result = {};\r\n        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n        result.default = mod;\r\n        return result;\r\n    }\r\n\r\n    function __importDefault(mod) {\r\n        return (mod && mod.__esModule) ? mod : { default: mod };\r\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var $COMPILE = '$compile';\n    var $CONTROLLER = '$controller';\n    var $DELEGATE = '$delegate';\n    var $EXCEPTION_HANDLER = '$exceptionHandler';\n    var $HTTP_BACKEND = '$httpBackend';\n    var $INJECTOR = '$injector';\n    var $INTERVAL = '$interval';\n    var $PARSE = '$parse';\n    var $PROVIDE = '$provide';\n    var $ROOT_SCOPE = '$rootScope';\n    var $SCOPE = '$scope';\n    var $TEMPLATE_CACHE = '$templateCache';\n    var $TEMPLATE_REQUEST = '$templateRequest';\n    var $$TESTABILITY = '$$testability';\n    var COMPILER_KEY = '$$angularCompiler';\n    var DOWNGRADED_MODULE_COUNT_KEY = '$$angularDowngradedModuleCount';\n    var GROUP_PROJECTABLE_NODES_KEY = '$$angularGroupProjectableNodes';\n    var INJECTOR_KEY = '$$angularInjector';\n    var LAZY_MODULE_REF = '$$angularLazyModuleRef';\n    var NG_ZONE_KEY = '$$angularNgZone';\n    var UPGRADE_APP_TYPE_KEY = '$$angularUpgradeAppType';\n    var REQUIRE_INJECTOR = '?^^' + INJECTOR_KEY;\n    var REQUIRE_NG_MODEL = '?ngModel';\n    var UPGRADE_MODULE_NAME = '$$UpgradeModule';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * A `PropertyBinding` represents a mapping between a property name\n     * and an attribute name. It is parsed from a string of the form\n     * `\"prop: attr\"`; or simply `\"propAndAttr\" where the property\n     * and attribute have the same identifier.\n     */\n    var PropertyBinding = /** @class */ (function () {\n        function PropertyBinding(prop, attr) {\n            this.prop = prop;\n            this.attr = attr;\n            this.parseBinding();\n        }\n        PropertyBinding.prototype.parseBinding = function () {\n            this.bracketAttr = \"[\" + this.attr + \"]\";\n            this.parenAttr = \"(\" + this.attr + \")\";\n            this.bracketParenAttr = \"[(\" + this.attr + \")]\";\n            var capitalAttr = this.attr.charAt(0).toUpperCase() + this.attr.substr(1);\n            this.onAttr = \"on\" + capitalAttr;\n            this.bindAttr = \"bind\" + capitalAttr;\n            this.bindonAttr = \"bindon\" + capitalAttr;\n        };\n        return PropertyBinding;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var DIRECTIVE_PREFIX_REGEXP = /^(?:x|data)[:\\-_]/i;\n    var DIRECTIVE_SPECIAL_CHARS_REGEXP = /[:\\-_]+(.)/g;\n    function onError(e) {\n        // TODO: (misko): We seem to not have a stack trace here!\n        if (console.error) {\n            console.error(e, e.stack);\n        }\n        else {\n            // tslint:disable-next-line:no-console\n            console.log(e, e.stack);\n        }\n        throw e;\n    }\n    function controllerKey(name) {\n        return '$' + name + 'Controller';\n    }\n    function directiveNormalize(name) {\n        return name.replace(DIRECTIVE_PREFIX_REGEXP, '')\n            .replace(DIRECTIVE_SPECIAL_CHARS_REGEXP, function (_, letter) { return letter.toUpperCase(); });\n    }\n    function getTypeName(type) {\n        // Return the name of the type or the first line of its stringified version.\n        return type.overriddenName || type.name || type.toString().split('\\n')[0];\n    }\n    function getDowngradedModuleCount($injector) {\n        return $injector.has(DOWNGRADED_MODULE_COUNT_KEY) ? $injector.get(DOWNGRADED_MODULE_COUNT_KEY) :\n            0;\n    }\n    function getUpgradeAppType($injector) {\n        return $injector.has(UPGRADE_APP_TYPE_KEY) ? $injector.get(UPGRADE_APP_TYPE_KEY) :\n            0 /* None */;\n    }\n    function isFunction(value) {\n        return typeof value === 'function';\n    }\n    function validateInjectionKey($injector, downgradedModule, injectionKey, attemptedAction) {\n        var upgradeAppType = getUpgradeAppType($injector);\n        var downgradedModuleCount = getDowngradedModuleCount($injector);\n        // Check for common errors.\n        switch (upgradeAppType) {\n            case 1 /* Dynamic */:\n            case 2 /* Static */:\n                if (downgradedModule) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' unexpectedly specified.\\n\" +\n                        'You should not specify a value for \\'downgradedModule\\', unless you are downgrading ' +\n                        'more than one Angular module (via \\'downgradeModule()\\').');\n                }\n                break;\n            case 3 /* Lite */:\n                if (!downgradedModule && (downgradedModuleCount >= 2)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": 'downgradedModule' not specified.\\n\" +\n                        'This application contains more than one downgraded Angular module, thus you need to ' +\n                        'always specify \\'downgradedModule\\' when downgrading components and injectables.');\n                }\n                if (!$injector.has(injectionKey)) {\n                    throw new Error(\"Error while \" + attemptedAction + \": Unable to find the specified downgraded module.\\n\" +\n                        'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                        'application?');\n                }\n                break;\n            default:\n                throw new Error(\"Error while \" + attemptedAction + \": Not a valid '@angular/upgrade' application.\\n\" +\n                    'Did you forget to downgrade an Angular module or include it in the AngularJS ' +\n                    'application?');\n        }\n    }\n    var Deferred = /** @class */ (function () {\n        function Deferred() {\n            var _this = this;\n            this.promise = new Promise(function (res, rej) {\n                _this.resolve = res;\n                _this.reject = rej;\n            });\n        }\n        return Deferred;\n    }());\n    /**\n     * @return Whether the passed-in component implements the subset of the\n     *     `ControlValueAccessor` interface needed for AngularJS `ng-model`\n     *     compatibility.\n     */\n    function supportsNgModel(component) {\n        return typeof component.writeValue === 'function' &&\n            typeof component.registerOnChange === 'function';\n    }\n    /**\n     * Glue the AngularJS `NgModelController` (if it exists) to the component\n     * (if it implements the needed subset of the `ControlValueAccessor` interface).\n     */\n    function hookupNgModel(ngModel, component) {\n        if (ngModel && supportsNgModel(component)) {\n            ngModel.$render = function () { component.writeValue(ngModel.$viewValue); };\n            component.registerOnChange(ngModel.$setViewValue.bind(ngModel));\n            if (typeof component.registerOnTouched === 'function') {\n                component.registerOnTouched(ngModel.$setTouched.bind(ngModel));\n            }\n        }\n    }\n    /**\n     * Test two values for strict equality, accounting for the fact that `NaN !== NaN`.\n     */\n    function strictEquals(val1, val2) {\n        return val1 === val2 || (val1 !== val1 && val2 !== val2);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var INITIAL_VALUE = {\n        __UNINITIALIZED__: true\n    };\n    var DowngradeComponentAdapter = /** @class */ (function () {\n        function DowngradeComponentAdapter(element, attrs, scope, ngModel, parentInjector, $injector, $compile, $parse, componentFactory, wrapCallback) {\n            this.element = element;\n            this.attrs = attrs;\n            this.scope = scope;\n            this.ngModel = ngModel;\n            this.parentInjector = parentInjector;\n            this.$injector = $injector;\n            this.$compile = $compile;\n            this.$parse = $parse;\n            this.componentFactory = componentFactory;\n            this.wrapCallback = wrapCallback;\n            this.implementsOnChanges = false;\n            this.inputChangeCount = 0;\n            this.inputChanges = {};\n            this.componentScope = scope.$new();\n        }\n        DowngradeComponentAdapter.prototype.compileContents = function () {\n            var _this = this;\n            var compiledProjectableNodes = [];\n            var projectableNodes = this.groupProjectableNodes();\n            var linkFns = projectableNodes.map(function (nodes) { return _this.$compile(nodes); });\n            this.element.empty();\n            linkFns.forEach(function (linkFn) {\n                linkFn(_this.scope, function (clone) {\n                    compiledProjectableNodes.push(clone);\n                    _this.element.append(clone);\n                });\n            });\n            return compiledProjectableNodes;\n        };\n        DowngradeComponentAdapter.prototype.createComponent = function (projectableNodes) {\n            var providers = [{ provide: $SCOPE, useValue: this.componentScope }];\n            var childInjector = core.Injector.create({ providers: providers, parent: this.parentInjector, name: 'DowngradeComponentAdapter' });\n            this.componentRef =\n                this.componentFactory.create(childInjector, projectableNodes, this.element[0]);\n            this.viewChangeDetector = this.componentRef.injector.get(core.ChangeDetectorRef);\n            this.changeDetector = this.componentRef.changeDetectorRef;\n            this.component = this.componentRef.instance;\n            // testability hook is commonly added during component bootstrap in\n            // packages/core/src/application_ref.bootstrap()\n            // in downgraded application, component creation will take place here as well as adding the\n            // testability hook.\n            var testability = this.componentRef.injector.get(core.Testability, null);\n            if (testability) {\n                this.componentRef.injector.get(core.TestabilityRegistry)\n                    .registerApplication(this.componentRef.location.nativeElement, testability);\n            }\n            hookupNgModel(this.ngModel, this.component);\n        };\n        DowngradeComponentAdapter.prototype.setupInputs = function (manuallyAttachView, propagateDigest) {\n            var _this = this;\n            if (propagateDigest === void 0) { propagateDigest = true; }\n            var attrs = this.attrs;\n            var inputs = this.componentFactory.inputs || [];\n            var _loop_1 = function (i) {\n                var input = new PropertyBinding(inputs[i].propName, inputs[i].templateName);\n                var expr = null;\n                if (attrs.hasOwnProperty(input.attr)) {\n                    var observeFn_1 = (function (prop) {\n                        var prevValue = INITIAL_VALUE;\n                        return function (currValue) {\n                            // Initially, both `$observe()` and `$watch()` will call this function.\n                            if (!strictEquals(prevValue, currValue)) {\n                                if (prevValue === INITIAL_VALUE) {\n                                    prevValue = currValue;\n                                }\n                                _this.updateInput(prop, prevValue, currValue);\n                                prevValue = currValue;\n                            }\n                        };\n                    })(input.prop);\n                    attrs.$observe(input.attr, observeFn_1);\n                    // Use `$watch()` (in addition to `$observe()`) in order to initialize the input in time\n                    // for `ngOnChanges()`. This is necessary if we are already in a `$digest`, which means that\n                    // `ngOnChanges()` (which is called by a watcher) will run before the `$observe()` callback.\n                    var unwatch_1 = this_1.componentScope.$watch(function () {\n                        unwatch_1();\n                        unwatch_1 = null;\n                        observeFn_1(attrs[input.attr]);\n                    });\n                }\n                else if (attrs.hasOwnProperty(input.bindAttr)) {\n                    expr = attrs[input.bindAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketAttr)) {\n                    expr = attrs[input.bracketAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bindonAttr)) {\n                    expr = attrs[input.bindonAttr];\n                }\n                else if (attrs.hasOwnProperty(input.bracketParenAttr)) {\n                    expr = attrs[input.bracketParenAttr];\n                }\n                if (expr != null) {\n                    var watchFn = (function (prop) { return function (currValue, prevValue) {\n                        return _this.updateInput(prop, prevValue, currValue);\n                    }; })(input.prop);\n                    this_1.componentScope.$watch(expr, watchFn);\n                }\n            };\n            var this_1 = this;\n            for (var i = 0; i < inputs.length; i++) {\n                _loop_1(i);\n            }\n            // Invoke `ngOnChanges()` and Change Detection (when necessary)\n            var detectChanges = function () { return _this.changeDetector.detectChanges(); };\n            var prototype = this.componentFactory.componentType.prototype;\n            this.implementsOnChanges = !!(prototype && prototype.ngOnChanges);\n            this.componentScope.$watch(function () { return _this.inputChangeCount; }, this.wrapCallback(function () {\n                // Invoke `ngOnChanges()`\n                if (_this.implementsOnChanges) {\n                    var inputChanges = _this.inputChanges;\n                    _this.inputChanges = {};\n                    _this.component.ngOnChanges(inputChanges);\n                }\n                _this.viewChangeDetector.markForCheck();\n                // If opted out of propagating digests, invoke change detection when inputs change.\n                if (!propagateDigest) {\n                    detectChanges();\n                }\n            }));\n            // If not opted out of propagating digests, invoke change detection on every digest\n            if (propagateDigest) {\n                this.componentScope.$watch(this.wrapCallback(detectChanges));\n            }\n            // If necessary, attach the view so that it will be dirty-checked.\n            // (Allow time for the initial input values to be set and `ngOnChanges()` to be called.)\n            if (manuallyAttachView || !propagateDigest) {\n                var unwatch_2 = this.componentScope.$watch(function () {\n                    unwatch_2();\n                    unwatch_2 = null;\n                    var appRef = _this.parentInjector.get(core.ApplicationRef);\n                    appRef.attachView(_this.componentRef.hostView);\n                });\n            }\n        };\n        DowngradeComponentAdapter.prototype.setupOutputs = function () {\n            var attrs = this.attrs;\n            var outputs = this.componentFactory.outputs || [];\n            for (var j = 0; j < outputs.length; j++) {\n                var output = new PropertyBinding(outputs[j].propName, outputs[j].templateName);\n                var bindonAttr = output.bindonAttr.substring(0, output.bindonAttr.length - 6);\n                var bracketParenAttr = \"[(\" + output.bracketParenAttr.substring(2, output.bracketParenAttr.length - 8) + \")]\";\n                // order below is important - first update bindings then evaluate expressions\n                if (attrs.hasOwnProperty(bindonAttr)) {\n                    this.subscribeToOutput(output, attrs[bindonAttr], true);\n                }\n                if (attrs.hasOwnProperty(bracketParenAttr)) {\n                    this.subscribeToOutput(output, attrs[bracketParenAttr], true);\n                }\n                if (attrs.hasOwnProperty(output.onAttr)) {\n                    this.subscribeToOutput(output, attrs[output.onAttr]);\n                }\n                if (attrs.hasOwnProperty(output.parenAttr)) {\n                    this.subscribeToOutput(output, attrs[output.parenAttr]);\n                }\n            }\n        };\n        DowngradeComponentAdapter.prototype.subscribeToOutput = function (output, expr, isAssignment) {\n            var _this = this;\n            if (isAssignment === void 0) { isAssignment = false; }\n            var getter = this.$parse(expr);\n            var setter = getter.assign;\n            if (isAssignment && !setter) {\n                throw new Error(\"Expression '\" + expr + \"' is not assignable!\");\n            }\n            var emitter = this.component[output.prop];\n            if (emitter) {\n                emitter.subscribe({\n                    next: isAssignment ? function (v) { return setter(_this.scope, v); } :\n                        function (v) { return getter(_this.scope, { '$event': v }); }\n                });\n            }\n            else {\n                throw new Error(\"Missing emitter '\" + output.prop + \"' on component '\" + getTypeName(this.componentFactory.componentType) + \"'!\");\n            }\n        };\n        DowngradeComponentAdapter.prototype.registerCleanup = function () {\n            var _this = this;\n            var testabilityRegistry = this.componentRef.injector.get(core.TestabilityRegistry);\n            var destroyComponentRef = this.wrapCallback(function () { return _this.componentRef.destroy(); });\n            var destroyed = false;\n            this.element.on('$destroy', function () { return _this.componentScope.$destroy(); });\n            this.componentScope.$on('$destroy', function () {\n                if (!destroyed) {\n                    destroyed = true;\n                    testabilityRegistry.unregisterApplication(_this.componentRef.location.nativeElement);\n                    destroyComponentRef();\n                }\n            });\n        };\n        DowngradeComponentAdapter.prototype.getInjector = function () { return this.componentRef.injector; };\n        DowngradeComponentAdapter.prototype.updateInput = function (prop, prevValue, currValue) {\n            if (this.implementsOnChanges) {\n                this.inputChanges[prop] = new core.SimpleChange(prevValue, currValue, prevValue === currValue);\n            }\n            this.inputChangeCount++;\n            this.component[prop] = currValue;\n        };\n        DowngradeComponentAdapter.prototype.groupProjectableNodes = function () {\n            var ngContentSelectors = this.componentFactory.ngContentSelectors;\n            return groupNodesBySelector(ngContentSelectors, this.element.contents());\n        };\n        return DowngradeComponentAdapter;\n    }());\n    /**\n     * Group a set of DOM nodes into `ngContent` groups, based on the given content selectors.\n     */\n    function groupNodesBySelector(ngContentSelectors, nodes) {\n        var projectableNodes = [];\n        var wildcardNgContentIndex;\n        for (var i = 0, ii = ngContentSelectors.length; i < ii; ++i) {\n            projectableNodes[i] = [];\n        }\n        for (var j = 0, jj = nodes.length; j < jj; ++j) {\n            var node = nodes[j];\n            var ngContentIndex = findMatchingNgContentIndex(node, ngContentSelectors);\n            if (ngContentIndex != null) {\n                projectableNodes[ngContentIndex].push(node);\n            }\n        }\n        return projectableNodes;\n    }\n    function findMatchingNgContentIndex(element, ngContentSelectors) {\n        var ngContentIndices = [];\n        var wildcardNgContentIndex = -1;\n        for (var i = 0; i < ngContentSelectors.length; i++) {\n            var selector = ngContentSelectors[i];\n            if (selector === '*') {\n                wildcardNgContentIndex = i;\n            }\n            else {\n                if (matchesSelector(element, selector)) {\n                    ngContentIndices.push(i);\n                }\n            }\n        }\n        ngContentIndices.sort();\n        if (wildcardNgContentIndex !== -1) {\n            ngContentIndices.push(wildcardNgContentIndex);\n        }\n        return ngContentIndices.length ? ngContentIndices[0] : null;\n    }\n    var _matches;\n    function matchesSelector(el, selector) {\n        if (!_matches) {\n            var elProto = Element.prototype;\n            _matches = elProto.matches || elProto.matchesSelector || elProto.mozMatchesSelector ||\n                elProto.msMatchesSelector || elProto.oMatchesSelector || elProto.webkitMatchesSelector;\n        }\n        return el.nodeType === Node.ELEMENT_NODE ? _matches.call(el, selector) : false;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function isThenable(obj) {\n        return !!obj && isFunction(obj.then);\n    }\n    /**\n     * Synchronous, promise-like object.\n     */\n    var SyncPromise = /** @class */ (function () {\n        function SyncPromise() {\n            this.resolved = false;\n            this.callbacks = [];\n        }\n        SyncPromise.all = function (valuesOrPromises) {\n            var aggrPromise = new SyncPromise();\n            var resolvedCount = 0;\n            var results = [];\n            var resolve = function (idx, value) {\n                results[idx] = value;\n                if (++resolvedCount === valuesOrPromises.length)\n                    aggrPromise.resolve(results);\n            };\n            valuesOrPromises.forEach(function (p, idx) {\n                if (isThenable(p)) {\n                    p.then(function (v) { return resolve(idx, v); });\n                }\n                else {\n                    resolve(idx, p);\n                }\n            });\n            return aggrPromise;\n        };\n        SyncPromise.prototype.resolve = function (value) {\n            // Do nothing, if already resolved.\n            if (this.resolved)\n                return;\n            this.value = value;\n            this.resolved = true;\n            // Run the queued callbacks.\n            this.callbacks.forEach(function (callback) { return callback(value); });\n            this.callbacks.length = 0;\n        };\n        SyncPromise.prototype.then = function (callback) {\n            if (this.resolved) {\n                callback(this.value);\n            }\n            else {\n                this.callbacks.push(callback);\n            }\n        };\n        return SyncPromise;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function that allows an Angular component to be used from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function to be used for registering\n     * an AngularJS wrapper directive for \"downgrading\" an Angular component.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an Angular component called `ng2Heroes` that needs\n     * to be made available in AngularJS templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes\"}\n     *\n     * We must create an AngularJS [directive](https://docs.angularjs.org/guide/directive)\n     * that will make this Angular component available inside AngularJS templates.\n     * The `downgradeComponent()` function returns a factory function that we\n     * can use to define the AngularJS directive that wraps the \"downgraded\" component.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-wrapper\"}\n     *\n     * @param info contains information about the Component that is being downgraded:\n     *\n     * - `component: Type<any>`: The type of the Component that will be downgraded\n     * - `downgradedModule?: string`: The name of the downgraded module (if any) that the component\n     *   \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose\n     *   corresponding Angular module will be bootstrapped, when the component needs to be instantiated.\n     *   <br />\n     *   (This option is only necessary when using `downgradeModule()` to downgrade more than one\n     *   Angular module.)\n     * - `propagateDigest?: boolean`: Whether to perform {@link ChangeDetectorRef#detectChanges\n     *   change detection} on the component on every\n     *   [$digest](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest). If set to `false`,\n     *   change detection will still be performed when any of the component's inputs changes.\n     *   (Default: true)\n     *\n     * @returns a factory function that can be used to register the component in an\n     * AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeComponent(info) {\n        var directiveFactory = function ($compile, $injector, $parse) {\n            // When using `downgradeModule()`, we need to handle certain things specially. For example:\n            // - We always need to attach the component view to the `ApplicationRef` for it to be\n            //   dirty-checked.\n            // - We need to ensure callbacks to Angular APIs (e.g. change detection) are run inside the\n            //   Angular zone.\n            //   NOTE: This is not needed, when using `UpgradeModule`, because `$digest()` will be run\n            //         inside the Angular zone (except if explicitly escaped, in which case we shouldn't\n            //         force it back in).\n            var isNgUpgradeLite = getUpgradeAppType($injector) === 3 /* Lite */;\n            var wrapCallback = !isNgUpgradeLite ? function (cb) { return cb; } : function (cb) { return function () { return core.NgZone.isInAngularZone() ? cb() : ngZone.run(cb); }; };\n            var ngZone;\n            // When downgrading multiple modules, special handling is needed wrt injectors.\n            var hasMultipleDowngradedModules = isNgUpgradeLite && (getDowngradedModuleCount($injector) > 1);\n            return {\n                restrict: 'E',\n                terminal: true,\n                require: [REQUIRE_INJECTOR, REQUIRE_NG_MODEL],\n                link: function (scope, element, attrs, required) {\n                    // We might have to compile the contents asynchronously, because this might have been\n                    // triggered by `UpgradeNg1ComponentAdapterBuilder`, before the Angular templates have\n                    // been compiled.\n                    var ngModel = required[1];\n                    var parentInjector = required[0];\n                    var moduleInjector = undefined;\n                    var ranAsync = false;\n                    if (!parentInjector || hasMultipleDowngradedModules) {\n                        var downgradedModule = info.downgradedModule || '';\n                        var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + downgradedModule;\n                        var attemptedAction = \"instantiating component '\" + getTypeName(info.component) + \"'\";\n                        validateInjectionKey($injector, downgradedModule, lazyModuleRefKey, attemptedAction);\n                        var lazyModuleRef = $injector.get(lazyModuleRefKey);\n                        moduleInjector = lazyModuleRef.injector || lazyModuleRef.promise;\n                    }\n                    // Notes:\n                    //\n                    // There are two injectors: `finalModuleInjector` and `finalParentInjector` (they might be\n                    // the same instance, but that is irrelevant):\n                    // - `finalModuleInjector` is used to retrieve `ComponentFactoryResolver`, thus it must be\n                    //   on the same tree as the `NgModule` that declares this downgraded component.\n                    // - `finalParentInjector` is used for all other injection purposes.\n                    //   (Note that Angular knows to only traverse the component-tree part of that injector,\n                    //   when looking for an injectable and then switch to the module injector.)\n                    //\n                    // There are basically three cases:\n                    // - If there is no parent component (thus no `parentInjector`), we bootstrap the downgraded\n                    //   `NgModule` and use its injector as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component (and thus a `parentInjector`) and we are sure that it\n                    //   belongs to the same `NgModule` as this downgraded component (e.g. because there is only\n                    //   one downgraded module, we use that `parentInjector` as both `finalModuleInjector` and\n                    //   `finalParentInjector`.\n                    // - If there is a parent component, but it may belong to a different `NgModule`, then we\n                    //   use the `parentInjector` as `finalParentInjector` and this downgraded component's\n                    //   declaring `NgModule`'s injector as `finalModuleInjector`.\n                    //   Note 1: If the `NgModule` is already bootstrapped, we just get its injector (we don't\n                    //           bootstrap again).\n                    //   Note 2: It is possible that (while there are multiple downgraded modules) this\n                    //           downgraded component and its parent component both belong to the same NgModule.\n                    //           In that case, we could have used the `parentInjector` as both\n                    //           `finalModuleInjector` and `finalParentInjector`, but (for simplicity) we are\n                    //           treating this case as if they belong to different `NgModule`s. That doesn't\n                    //           really affect anything, since `parentInjector` has `moduleInjector` as ancestor\n                    //           and trying to resolve `ComponentFactoryResolver` from either one will return\n                    //           the same instance.\n                    // If there is a parent component, use its injector as parent injector.\n                    // If this is a \"top-level\" Angular component, use the module injector.\n                    var finalParentInjector = parentInjector || moduleInjector;\n                    // If this is a \"top-level\" Angular component or the parent component may belong to a\n                    // different `NgModule`, use the module injector for module-specific dependencies.\n                    // If there is a parent component that belongs to the same `NgModule`, use its injector.\n                    var finalModuleInjector = moduleInjector || parentInjector;\n                    var doDowngrade = function (injector, moduleInjector) {\n                        // Retrieve `ComponentFactoryResolver` from the injector tied to the `NgModule` this\n                        // component belongs to.\n                        var componentFactoryResolver = moduleInjector.get(core.ComponentFactoryResolver);\n                        var componentFactory = componentFactoryResolver.resolveComponentFactory(info.component);\n                        if (!componentFactory) {\n                            throw new Error(\"Expecting ComponentFactory for: \" + getTypeName(info.component));\n                        }\n                        var injectorPromise = new ParentInjectorPromise(element);\n                        var facade = new DowngradeComponentAdapter(element, attrs, scope, ngModel, injector, $injector, $compile, $parse, componentFactory, wrapCallback);\n                        var projectableNodes = facade.compileContents();\n                        facade.createComponent(projectableNodes);\n                        facade.setupInputs(isNgUpgradeLite, info.propagateDigest);\n                        facade.setupOutputs();\n                        facade.registerCleanup();\n                        injectorPromise.resolve(facade.getInjector());\n                        if (ranAsync) {\n                            // If this is run async, it is possible that it is not run inside a\n                            // digest and initial input values will not be detected.\n                            scope.$evalAsync(function () { });\n                        }\n                    };\n                    var downgradeFn = !isNgUpgradeLite ? doDowngrade : function (pInjector, mInjector) {\n                        if (!ngZone) {\n                            ngZone = pInjector.get(core.NgZone);\n                        }\n                        wrapCallback(function () { return doDowngrade(pInjector, mInjector); })();\n                    };\n                    // NOTE:\n                    // Not using `ParentInjectorPromise.all()` (which is inherited from `SyncPromise`), because\n                    // Closure Compiler (or some related tool) complains:\n                    // `TypeError: ...$src$downgrade_component_ParentInjectorPromise.all is not a function`\n                    SyncPromise.all([finalParentInjector, finalModuleInjector])\n                        .then(function (_a) {\n                        var _b = __read(_a, 2), pInjector = _b[0], mInjector = _b[1];\n                        return downgradeFn(pInjector, mInjector);\n                    });\n                    ranAsync = true;\n                }\n            };\n        };\n        // bracket-notation because of closure - see #14441\n        directiveFactory['$inject'] = [$COMPILE, $INJECTOR, $PARSE];\n        return directiveFactory;\n    }\n    /**\n     * Synchronous promise-like object to wrap parent injectors,\n     * to preserve the synchronous nature of AngularJS's `$compile`.\n     */\n    var ParentInjectorPromise = /** @class */ (function (_super) {\n        __extends(ParentInjectorPromise, _super);\n        function ParentInjectorPromise(element) {\n            var _this = _super.call(this) || this;\n            _this.element = element;\n            _this.injectorKey = controllerKey(INJECTOR_KEY);\n            // Store the promise on the element.\n            element.data(_this.injectorKey, _this);\n            return _this;\n        }\n        ParentInjectorPromise.prototype.resolve = function (injector) {\n            // Store the real injector on the element.\n            this.element.data(this.injectorKey, injector);\n            // Release the element to prevent memory leaks.\n            this.element = null;\n            // Resolve the promise.\n            _super.prototype.resolve.call(this, injector);\n        };\n        return ParentInjectorPromise;\n    }(SyncPromise));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * A helper function to allow an Angular service to be accessible from AngularJS.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * This helper function returns a factory function that provides access to the Angular\n     * service identified by the `token` parameter.\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * First ensure that the service to be downgraded is provided in an `NgModule`\n     * that will be part of the upgrade application. For example, let's assume we have\n     * defined `HeroesService`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-heroes-service\"}\n     *\n     * and that we have included this in our upgrade app `NgModule`\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng2-module\"}\n     *\n     * Now we can register the `downgradeInjectable` factory function for the service\n     * on an AngularJS module.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"downgrade-ng2-heroes-service\"}\n     *\n     * Inside an AngularJS component's controller we can get hold of the\n     * downgraded service via the name we gave when downgrading.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"example-app\"}\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   When using `downgradeModule()`, downgraded injectables will not be available until the Angular\n     *   module that provides them is instantiated. In order to be safe, you need to ensure that the\n     *   downgraded injectables are not used anywhere _outside_ the part of the app where it is\n     *   guaranteed that their module has been instantiated.\n     *\n     *   For example, it is _OK_ to use a downgraded service in an upgraded component that is only used\n     *   from a downgraded Angular component provided by the same Angular module as the injectable, but\n     *   it is _not OK_ to use it in an AngularJS component that may be used independently of Angular or\n     *   use it in a downgraded Angular component from a different module.\n     *\n     * </div>\n     *\n     * @param token an `InjectionToken` that identifies a service provided from Angular.\n     * @param downgradedModule the name of the downgraded module (if any) that the injectable\n     * \"belongs to\", as returned by a call to `downgradeModule()`. It is the module, whose injector will\n     * be used for instantiating the injectable.<br />\n     * (This option is only necessary when using `downgradeModule()` to downgrade more than one Angular\n     * module.)\n     *\n     * @returns a [factory function](https://docs.angularjs.org/guide/di) that can be\n     * used to register the service on an AngularJS module.\n     *\n     * @publicApi\n     */\n    function downgradeInjectable(token, downgradedModule) {\n        if (downgradedModule === void 0) { downgradedModule = ''; }\n        var factory = function ($injector) {\n            var injectorKey = \"\" + INJECTOR_KEY + downgradedModule;\n            var injectableName = isFunction(token) ? getTypeName(token) : String(token);\n            var attemptedAction = \"instantiating injectable '\" + injectableName + \"'\";\n            validateInjectionKey($injector, downgradedModule, injectorKey, attemptedAction);\n            var injector = $injector.get(injectorKey);\n            return injector.get(token);\n        };\n        factory['$inject'] = [$INJECTOR];\n        return factory;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @publicApi\n     */\n    var VERSION = new core.Version('8.2.14');\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // We have to do a little dance to get the ng1 injector into the module injector.\n    // We store the ng1 injector so that the provider in the module injector can access it\n    // Then we \"get\" the ng1 injector from the module injector, which triggers the provider to read\n    // the stored injector and release the reference to it.\n    var tempInjectorRef = null;\n    function setTempInjectorRef(injector) {\n        tempInjectorRef = injector;\n    }\n    function injectorFactory() {\n        if (!tempInjectorRef) {\n            throw new Error('Trying to get the AngularJS injector before it being set.');\n        }\n        var injector = tempInjectorRef;\n        tempInjectorRef = null; // clear the value to prevent memory leaks\n        return injector;\n    }\n    function rootScopeFactory(i) {\n        return i.get('$rootScope');\n    }\n    function compileFactory(i) {\n        return i.get('$compile');\n    }\n    function parseFactory(i) {\n        return i.get('$parse');\n    }\n    var angular1Providers = [\n        // We must use exported named functions for the ng2 factories to keep the compiler happy:\n        // > Metadata collected contains an error that will be reported at runtime:\n        // >   Function calls are not supported.\n        // >   Consider replacing the function or lambda with a reference to an exported function\n        { provide: '$injector', useFactory: injectorFactory, deps: [] },\n        { provide: '$rootScope', useFactory: rootScopeFactory, deps: ['$injector'] },\n        { provide: '$compile', useFactory: compileFactory, deps: ['$injector'] },\n        { provide: '$parse', useFactory: parseFactory, deps: ['$injector'] }\n    ];\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NgAdapterInjector = /** @class */ (function () {\n        function NgAdapterInjector(modInjector) {\n            this.modInjector = modInjector;\n        }\n        // When Angular locate a service in the component injector tree, the not found value is set to\n        // `NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR`. In such a case we should not walk up to the module\n        // injector.\n        // AngularJS only supports a single tree and should always check the module injector.\n        NgAdapterInjector.prototype.get = function (token, notFoundValue) {\n            if (notFoundValue === core.ɵNOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {\n                return notFoundValue;\n            }\n            return this.modInjector.get(token, notFoundValue);\n        };\n        return NgAdapterInjector;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var moduleUid = 0;\n    /**\n     * @description\n     *\n     * A helper function for creating an AngularJS module that can bootstrap an Angular module\n     * \"on-demand\" (possibly lazily) when a {@link downgradeComponent downgraded component} needs to be\n     * instantiated.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static) library for hybrid upgrade apps that\n     * support AoT compilation.*\n     *\n     * It allows loading/bootstrapping the Angular part of a hybrid application lazily and not having to\n     * pay the cost up-front. For example, you can have an AngularJS application that uses Angular for\n     * specific routes and only instantiate the Angular modules if/when the user visits one of these\n     * routes.\n     *\n     * The Angular module will be bootstrapped once (when requested for the first time) and the same\n     * reference will be used from that point onwards.\n     *\n     * `downgradeModule()` requires either an `NgModuleFactory` or a function:\n     * - `NgModuleFactory`: If you pass an `NgModuleFactory`, it will be used to instantiate a module\n     *   using `platformBrowser`'s {@link PlatformRef#bootstrapModuleFactory bootstrapModuleFactory()}.\n     * - `Function`: If you pass a function, it is expected to return a promise resolving to an\n     *   `NgModuleRef`. The function is called with an array of extra {@link StaticProvider Providers}\n     *   that are expected to be available from the returned `NgModuleRef`'s `Injector`.\n     *\n     * `downgradeModule()` returns the name of the created AngularJS wrapper module. You can use it to\n     * declare a dependency in your main AngularJS module.\n     *\n     * {@example upgrade/static/ts/lite/module.ts region=\"basic-how-to\"}\n     *\n     * For more details on how to use `downgradeModule()` see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * @usageNotes\n     *\n     * Apart from `UpgradeModule`, you can use the rest of the `upgrade/static` helpers as usual to\n     * build a hybrid application. Note that the Angular pieces (e.g. downgraded services) will not be\n     * available until the downgraded module has been bootstrapped, i.e. by instantiating a downgraded\n     * component.\n     *\n     * <div class=\"alert is-important\">\n     *\n     *   You cannot use `downgradeModule()` and `UpgradeModule` in the same hybrid application.<br />\n     *   Use one or the other.\n     *\n     * </div>\n     *\n     * ### Differences with `UpgradeModule`\n     *\n     * Besides their different API, there are two important internal differences between\n     * `downgradeModule()` and `UpgradeModule` that affect the behavior of hybrid applications:\n     *\n     * 1. Unlike `UpgradeModule`, `downgradeModule()` does not bootstrap the main AngularJS module\n     *    inside the {@link NgZone Angular zone}.\n     * 2. Unlike `UpgradeModule`, `downgradeModule()` does not automatically run a\n     *    [$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest) when changes are\n     *    detected in the Angular part of the application.\n     *\n     * What this means is that applications using `UpgradeModule` will run change detection more\n     * frequently in order to ensure that both frameworks are properly notified about possible changes.\n     * This will inevitably result in more change detection runs than necessary.\n     *\n     * `downgradeModule()`, on the other side, does not try to tie the two change detection systems as\n     * tightly, restricting the explicit change detection runs only to cases where it knows it is\n     * necessary (e.g. when the inputs of a downgraded component change). This improves performance,\n     * especially in change-detection-heavy applications, but leaves it up to the developer to manually\n     * notify each framework as needed.\n     *\n     * For a more detailed discussion of the differences and their implications, see\n     * [Upgrading for Performance](guide/upgrade-performance).\n     *\n     * <div class=\"alert is-helpful\">\n     *\n     *   You can manually trigger a change detection run in AngularJS using\n     *   [scope.$apply(...)](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply) or\n     *   [$rootScope.$digest()](https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$digest).\n     *\n     *   You can manually trigger a change detection run in Angular using {@link NgZone#run\n     *   ngZone.run(...)}.\n     *\n     * </div>\n     *\n     * ### Downgrading multiple modules\n     *\n     * It is possible to downgrade multiple modules and include them in an AngularJS application. In\n     * that case, each downgraded module will be bootstrapped when an associated downgraded component or\n     * injectable needs to be instantiated.\n     *\n     * Things to keep in mind, when downgrading multiple modules:\n     *\n     * - Each downgraded component/injectable needs to be explicitly associated with a downgraded\n     *   module. See `downgradeComponent()` and `downgradeInjectable()` for more details.\n     *\n     * - If you want some injectables to be shared among all downgraded modules, you can provide them as\n     *   `StaticProvider`s, when creating the `PlatformRef` (e.g. via `platformBrowser` or\n     *   `platformBrowserDynamic`).\n     *\n     * - When using {@link PlatformRef#bootstrapmodule `bootstrapModule()`} or\n     *   {@link PlatformRef#bootstrapmodulefactory `bootstrapModuleFactory()`} to bootstrap the\n     *   downgraded modules, each one is considered a \"root\" module. As a consequence, a new instance\n     *   will be created for every injectable provided in `\"root\"` (via\n     *   {@link Injectable#providedIn `providedIn`}).\n     *   If this is not your intention, you can have a shared module (that will act as act as the \"root\"\n     *   module) and create all downgraded modules using that module's injector:\n     *\n     *   {@example upgrade/static/ts/lite-multi-shared/module.ts region=\"shared-root-module\"}\n     *\n     * @publicApi\n     */\n    function downgradeModule(moduleFactoryOrBootstrapFn) {\n        var lazyModuleName = UPGRADE_MODULE_NAME + \".lazy\" + ++moduleUid;\n        var lazyModuleRefKey = \"\" + LAZY_MODULE_REF + lazyModuleName;\n        var lazyInjectorKey = \"\" + INJECTOR_KEY + lazyModuleName;\n        var bootstrapFn = isFunction(moduleFactoryOrBootstrapFn) ?\n            moduleFactoryOrBootstrapFn :\n            function (extraProviders) {\n                return platformBrowser.platformBrowser(extraProviders).bootstrapModuleFactory(moduleFactoryOrBootstrapFn);\n            };\n        var injector;\n        // Create an ng1 module to bootstrap.\n        module_(lazyModuleName, [])\n            .constant(UPGRADE_APP_TYPE_KEY, 3 /* Lite */)\n            .factory(INJECTOR_KEY, [lazyInjectorKey, identity])\n            .factory(lazyInjectorKey, function () {\n            if (!injector) {\n                throw new Error('Trying to get the Angular injector before bootstrapping the corresponding ' +\n                    'Angular module.');\n            }\n            return injector;\n        })\n            .factory(LAZY_MODULE_REF, [lazyModuleRefKey, identity])\n            .factory(lazyModuleRefKey, [\n            $INJECTOR,\n            function ($injector) {\n                setTempInjectorRef($injector);\n                var result = {\n                    promise: bootstrapFn(angular1Providers).then(function (ref) {\n                        injector = result.injector = new NgAdapterInjector(ref.injector);\n                        injector.get($INJECTOR);\n                        return injector;\n                    })\n                };\n                return result;\n            }\n        ])\n            .config([\n            $INJECTOR, $PROVIDE,\n            function ($injector, $provide) {\n                $provide.constant(DOWNGRADED_MODULE_COUNT_KEY, getDowngradedModuleCount($injector) + 1);\n            }\n        ]);\n        return lazyModuleName;\n    }\n    function identity(x) {\n        return x;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // Constants\n    var REQUIRE_PREFIX_RE = /^(\\^\\^?)?(\\?)?(\\^\\^?)?/;\n    // Classes\n    var UpgradeHelper = /** @class */ (function () {\n        function UpgradeHelper(injector, name, elementRef, directive) {\n            this.injector = injector;\n            this.name = name;\n            this.$injector = injector.get($INJECTOR);\n            this.$compile = this.$injector.get($COMPILE);\n            this.$controller = this.$injector.get($CONTROLLER);\n            this.element = elementRef.nativeElement;\n            this.$element = element(this.element);\n            this.directive = directive || UpgradeHelper.getDirective(this.$injector, name);\n        }\n        UpgradeHelper.getDirective = function ($injector, name) {\n            var directives = $injector.get(name + 'Directive');\n            if (directives.length > 1) {\n                throw new Error(\"Only support single directive definition for: \" + name);\n            }\n            var directive = directives[0];\n            // AngularJS will transform `link: xyz` to `compile: () => xyz`. So we can only tell there was a\n            // user-defined `compile` if there is no `link`. In other cases, we will just ignore `compile`.\n            if (directive.compile && !directive.link)\n                notSupported(name, 'compile');\n            if (directive.replace)\n                notSupported(name, 'replace');\n            if (directive.terminal)\n                notSupported(name, 'terminal');\n            return directive;\n        };\n        UpgradeHelper.getTemplate = function ($injector, directive, fetchRemoteTemplate, $element) {\n            if (fetchRemoteTemplate === void 0) { fetchRemoteTemplate = false; }\n            if (directive.template !== undefined) {\n                return getOrCall(directive.template, $element);\n            }\n            else if (directive.templateUrl) {\n                var $templateCache_1 = $injector.get($TEMPLATE_CACHE);\n                var url_1 = getOrCall(directive.templateUrl, $element);\n                var template = $templateCache_1.get(url_1);\n                if (template !== undefined) {\n                    return template;\n                }\n                else if (!fetchRemoteTemplate) {\n                    throw new Error('loading directive templates asynchronously is not supported');\n                }\n                return new Promise(function (resolve, reject) {\n                    var $httpBackend = $injector.get($HTTP_BACKEND);\n                    $httpBackend('GET', url_1, null, function (status, response) {\n                        if (status === 200) {\n                            resolve($templateCache_1.put(url_1, response));\n                        }\n                        else {\n                            reject(\"GET component template from '\" + url_1 + \"' returned '\" + status + \": \" + response + \"'\");\n                        }\n                    });\n                });\n            }\n            else {\n                throw new Error(\"Directive '\" + directive.name + \"' is not a component, it is missing template.\");\n            }\n        };\n        UpgradeHelper.prototype.buildController = function (controllerType, $scope) {\n            // TODO: Document that we do not pre-assign bindings on the controller instance.\n            // Quoted properties below so that this code can be optimized with Closure Compiler.\n            var locals = { '$scope': $scope, '$element': this.$element };\n            var controller = this.$controller(controllerType, locals, null, this.directive.controllerAs);\n            this.$element.data(controllerKey(this.directive.name), controller);\n            return controller;\n        };\n        UpgradeHelper.prototype.compileTemplate = function (template) {\n            if (template === undefined) {\n                template =\n                    UpgradeHelper.getTemplate(this.$injector, this.directive, false, this.$element);\n            }\n            return this.compileHtml(template);\n        };\n        UpgradeHelper.prototype.onDestroy = function ($scope, controllerInstance) {\n            if (controllerInstance && isFunction(controllerInstance.$onDestroy)) {\n                controllerInstance.$onDestroy();\n            }\n            $scope.$destroy();\n            // Clean the jQuery/jqLite data on the component+child elements.\n            // Equivelent to how jQuery/jqLite invoke `cleanData` on an Element (this.element)\n            //  https://github.com/jquery/jquery/blob/e743cbd28553267f955f71ea7248377915613fd9/src/manipulation.js#L223\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/jqLite.js#L306-L312\n            // `cleanData` will invoke the AngularJS `$destroy` DOM event\n            //  https://github.com/angular/angular.js/blob/26ddc5f830f902a3d22f4b2aab70d86d4d688c82/src/Angular.js#L1911-L1924\n            element.cleanData([this.element]);\n            element.cleanData(this.element.querySelectorAll('*'));\n        };\n        UpgradeHelper.prototype.prepareTransclusion = function () {\n            var _this = this;\n            var transclude = this.directive.transclude;\n            var contentChildNodes = this.extractChildNodes();\n            var attachChildrenFn = function (scope, cloneAttachFn) {\n                // Since AngularJS v1.5.8, `cloneAttachFn` will try to destroy the transclusion scope if\n                // `$template` is empty. Since the transcluded content comes from Angular, not AngularJS,\n                // there will be no transclusion scope here.\n                // Provide a dummy `scope.$destroy()` method to prevent `cloneAttachFn` from throwing.\n                scope = scope || { $destroy: function () { return undefined; } };\n                return cloneAttachFn($template, scope);\n            };\n            var $template = contentChildNodes;\n            if (transclude) {\n                var slots_1 = Object.create(null);\n                if (typeof transclude === 'object') {\n                    $template = [];\n                    var slotMap_1 = Object.create(null);\n                    var filledSlots_1 = Object.create(null);\n                    // Parse the element selectors.\n                    Object.keys(transclude).forEach(function (slotName) {\n                        var selector = transclude[slotName];\n                        var optional = selector.charAt(0) === '?';\n                        selector = optional ? selector.substring(1) : selector;\n                        slotMap_1[selector] = slotName;\n                        slots_1[slotName] = null; // `null`: Defined but not yet filled.\n                        filledSlots_1[slotName] = optional; // Consider optional slots as filled.\n                    });\n                    // Add the matching elements into their slot.\n                    contentChildNodes.forEach(function (node) {\n                        var slotName = slotMap_1[directiveNormalize(node.nodeName.toLowerCase())];\n                        if (slotName) {\n                            filledSlots_1[slotName] = true;\n                            slots_1[slotName] = slots_1[slotName] || [];\n                            slots_1[slotName].push(node);\n                        }\n                        else {\n                            $template.push(node);\n                        }\n                    });\n                    // Check for required slots that were not filled.\n                    Object.keys(filledSlots_1).forEach(function (slotName) {\n                        if (!filledSlots_1[slotName]) {\n                            throw new Error(\"Required transclusion slot '\" + slotName + \"' on directive: \" + _this.name);\n                        }\n                    });\n                    Object.keys(slots_1).filter(function (slotName) { return slots_1[slotName]; }).forEach(function (slotName) {\n                        var nodes = slots_1[slotName];\n                        slots_1[slotName] = function (scope, cloneAttach) {\n                            return cloneAttach(nodes, scope);\n                        };\n                    });\n                }\n                // Attach `$$slots` to default slot transclude fn.\n                attachChildrenFn.$$slots = slots_1;\n                // AngularJS v1.6+ ignores empty or whitespace-only transcluded text nodes. But Angular\n                // removes all text content after the first interpolation and updates it later, after\n                // evaluating the expressions. This would result in AngularJS failing to recognize text\n                // nodes that start with an interpolation as transcluded content and use the fallback\n                // content instead.\n                // To avoid this issue, we add a\n                // [zero-width non-joiner character](https://en.wikipedia.org/wiki/Zero-width_non-joiner)\n                // to empty text nodes (which can only be a result of Angular removing their initial content).\n                // NOTE: Transcluded text content that starts with whitespace followed by an interpolation\n                //       will still fail to be detected by AngularJS v1.6+\n                $template.forEach(function (node) {\n                    if (node.nodeType === Node.TEXT_NODE && !node.nodeValue) {\n                        node.nodeValue = '\\u200C';\n                    }\n                });\n            }\n            return attachChildrenFn;\n        };\n        UpgradeHelper.prototype.resolveAndBindRequiredControllers = function (controllerInstance) {\n            var directiveRequire = this.getDirectiveRequire();\n            var requiredControllers = this.resolveRequire(directiveRequire);\n            if (controllerInstance && this.directive.bindToController && isMap(directiveRequire)) {\n                var requiredControllersMap_1 = requiredControllers;\n                Object.keys(requiredControllersMap_1).forEach(function (key) {\n                    controllerInstance[key] = requiredControllersMap_1[key];\n                });\n            }\n            return requiredControllers;\n        };\n        UpgradeHelper.prototype.compileHtml = function (html) {\n            this.element.innerHTML = html;\n            return this.$compile(this.element.childNodes);\n        };\n        UpgradeHelper.prototype.extractChildNodes = function () {\n            var childNodes = [];\n            var childNode;\n            while (childNode = this.element.firstChild) {\n                this.element.removeChild(childNode);\n                childNodes.push(childNode);\n            }\n            return childNodes;\n        };\n        UpgradeHelper.prototype.getDirectiveRequire = function () {\n            var require = this.directive.require || (this.directive.controller && this.directive.name);\n            if (isMap(require)) {\n                Object.keys(require).forEach(function (key) {\n                    var value = require[key];\n                    var match = value.match(REQUIRE_PREFIX_RE);\n                    var name = value.substring(match[0].length);\n                    if (!name) {\n                        require[key] = match[0] + key;\n                    }\n                });\n            }\n            return require;\n        };\n        UpgradeHelper.prototype.resolveRequire = function (require, controllerInstance) {\n            var _this = this;\n            if (!require) {\n                return null;\n            }\n            else if (Array.isArray(require)) {\n                return require.map(function (req) { return _this.resolveRequire(req); });\n            }\n            else if (typeof require === 'object') {\n                var value_1 = {};\n                Object.keys(require).forEach(function (key) { return value_1[key] = _this.resolveRequire(require[key]); });\n                return value_1;\n            }\n            else if (typeof require === 'string') {\n                var match = require.match(REQUIRE_PREFIX_RE);\n                var inheritType = match[1] || match[3];\n                var name_1 = require.substring(match[0].length);\n                var isOptional = !!match[2];\n                var searchParents = !!inheritType;\n                var startOnParent = inheritType === '^^';\n                var ctrlKey = controllerKey(name_1);\n                var elem = startOnParent ? this.$element.parent() : this.$element;\n                var value = searchParents ? elem.inheritedData(ctrlKey) : elem.data(ctrlKey);\n                if (!value && !isOptional) {\n                    throw new Error(\"Unable to find required '\" + require + \"' in upgraded directive '\" + this.name + \"'.\");\n                }\n                return value;\n            }\n            else {\n                throw new Error(\"Unrecognized 'require' syntax on upgraded directive '\" + this.name + \"': \" + require);\n            }\n        };\n        return UpgradeHelper;\n    }());\n    function getOrCall(property) {\n        var args = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            args[_i - 1] = arguments[_i];\n        }\n        return isFunction(property) ? property.apply(void 0, __spread(args)) : property;\n    }\n    // NOTE: Only works for `typeof T !== 'object'`.\n    function isMap(value) {\n        return value && !Array.isArray(value) && typeof value === 'object';\n    }\n    function notSupported(name, feature) {\n        throw new Error(\"Upgraded directive '\" + name + \"' contains unsupported feature: '\" + feature + \"'.\");\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var NOT_SUPPORTED = 'NOT_SUPPORTED';\n    var INITIAL_VALUE$1 = {\n        __UNINITIALIZED__: true\n    };\n    var Bindings = /** @class */ (function () {\n        function Bindings() {\n            this.twoWayBoundProperties = [];\n            this.twoWayBoundLastValues = [];\n            this.expressionBoundProperties = [];\n            this.propertyToOutputMap = {};\n        }\n        return Bindings;\n    }());\n    /**\n     * @description\n     *\n     * A helper class that allows an AngularJS component to be used from Angular.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade%2Fstatic)\n     * library for hybrid upgrade apps that support AoT compilation.*\n     *\n     * This helper class should be used as a base class for creating Angular directives\n     * that wrap AngularJS components that need to be \"upgraded\".\n     *\n     * @usageNotes\n     * ### Examples\n     *\n     * Let's assume that you have an AngularJS component called `ng1Hero` that needs\n     * to be made available in Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero\"}\n     *\n     * We must create a `Directive` that will make this AngularJS component\n     * available inside Angular templates.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\"}\n     *\n     * In this example you can see that we must derive from the `UpgradeComponent`\n     * base class but also provide an {@link Directive `@Directive`} decorator. This is\n     * because the AoT compiler requires that this information is statically available at\n     * compile time.\n     *\n     * Note that we must do the following:\n     * * specify the directive's selector (`ng1-hero`)\n     * * specify all inputs and outputs that the AngularJS component expects\n     * * derive from `UpgradeComponent`\n     * * call the base class from the constructor, passing\n     *   * the AngularJS name of the component (`ng1Hero`)\n     *   * the `ElementRef` and `Injector` for the component wrapper\n     *\n     * @publicApi\n     */\n    var UpgradeComponent = /** @class */ (function () {\n        /**\n         * Create a new `UpgradeComponent` instance. You should not normally need to do this.\n         * Instead you should derive a new class from this one and call the super constructor\n         * from the base class.\n         *\n         * {@example upgrade/static/ts/full/module.ts region=\"ng1-hero-wrapper\" }\n         *\n         * * The `name` parameter should be the name of the AngularJS directive.\n         * * The `elementRef` and `injector` parameters should be acquired from Angular by dependency\n         *   injection into the base class constructor.\n         */\n        function UpgradeComponent(name, elementRef, injector) {\n            this.name = name;\n            this.elementRef = elementRef;\n            this.injector = injector;\n            this.helper = new UpgradeHelper(injector, name, elementRef);\n            this.$injector = this.helper.$injector;\n            this.element = this.helper.element;\n            this.$element = this.helper.$element;\n            this.directive = this.helper.directive;\n            this.bindings = this.initializeBindings(this.directive);\n            // We ask for the AngularJS scope from the Angular injector, since\n            // we will put the new component scope onto the new injector for each component\n            var $parentScope = injector.get($SCOPE);\n            // QUESTION 1: Should we create an isolated scope if the scope is only true?\n            // QUESTION 2: Should we make the scope accessible through `$element.scope()/isolateScope()`?\n            this.$componentScope = $parentScope.$new(!!this.directive.scope);\n            this.initializeOutputs();\n        }\n        UpgradeComponent.prototype.ngOnInit = function () {\n            var _this = this;\n            // Collect contents, insert and compile template\n            var attachChildNodes = this.helper.prepareTransclusion();\n            var linkFn = this.helper.compileTemplate();\n            // Instantiate controller\n            var controllerType = this.directive.controller;\n            var bindToController = this.directive.bindToController;\n            if (controllerType) {\n                this.controllerInstance = this.helper.buildController(controllerType, this.$componentScope);\n            }\n            else if (bindToController) {\n                throw new Error(\"Upgraded directive '\" + this.directive.name + \"' specifies 'bindToController' but no controller.\");\n            }\n            // Set up outputs\n            this.bindingDestination = bindToController ? this.controllerInstance : this.$componentScope;\n            this.bindOutputs();\n            // Require other controllers\n            var requiredControllers = this.helper.resolveAndBindRequiredControllers(this.controllerInstance);\n            // Hook: $onChanges\n            if (this.pendingChanges) {\n                this.forwardChanges(this.pendingChanges);\n                this.pendingChanges = null;\n            }\n            // Hook: $onInit\n            if (this.controllerInstance && isFunction(this.controllerInstance.$onInit)) {\n                this.controllerInstance.$onInit();\n            }\n            // Hook: $doCheck\n            if (this.controllerInstance && isFunction(this.controllerInstance.$doCheck)) {\n                var callDoCheck = function () { return _this.controllerInstance.$doCheck(); };\n                this.unregisterDoCheckWatcher = this.$componentScope.$parent.$watch(callDoCheck);\n                callDoCheck();\n            }\n            // Linking\n            var link = this.directive.link;\n            var preLink = (typeof link == 'object') && link.pre;\n            var postLink = (typeof link == 'object') ? link.post : link;\n            var attrs = NOT_SUPPORTED;\n            var transcludeFn = NOT_SUPPORTED;\n            if (preLink) {\n                preLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            linkFn(this.$componentScope, null, { parentBoundTranscludeFn: attachChildNodes });\n            if (postLink) {\n                postLink(this.$componentScope, this.$element, attrs, requiredControllers, transcludeFn);\n            }\n            // Hook: $postLink\n            if (this.controllerInstance && isFunction(this.controllerInstance.$postLink)) {\n                this.controllerInstance.$postLink();\n            }\n        };\n        UpgradeComponent.prototype.ngOnChanges = function (changes) {\n            if (!this.bindingDestination) {\n                this.pendingChanges = changes;\n            }\n            else {\n                this.forwardChanges(changes);\n            }\n        };\n        UpgradeComponent.prototype.ngDoCheck = function () {\n            var _this = this;\n            var twoWayBoundProperties = this.bindings.twoWayBoundProperties;\n            var twoWayBoundLastValues = this.bindings.twoWayBoundLastValues;\n            var propertyToOutputMap = this.bindings.propertyToOutputMap;\n            twoWayBoundProperties.forEach(function (propName, idx) {\n                var newValue = _this.bindingDestination[propName];\n                var oldValue = twoWayBoundLastValues[idx];\n                if (!core.ɵlooseIdentical(newValue, oldValue)) {\n                    var outputName = propertyToOutputMap[propName];\n                    var eventEmitter = _this[outputName];\n                    eventEmitter.emit(newValue);\n                    twoWayBoundLastValues[idx] = newValue;\n                }\n            });\n        };\n        UpgradeComponent.prototype.ngOnDestroy = function () {\n            if (isFunction(this.unregisterDoCheckWatcher)) {\n                this.unregisterDoCheckWatcher();\n            }\n            this.helper.onDestroy(this.$componentScope, this.controllerInstance);\n        };\n        UpgradeComponent.prototype.initializeBindings = function (directive) {\n            var _this = this;\n            var btcIsObject = typeof directive.bindToController === 'object';\n            if (btcIsObject && Object.keys(directive.scope).length) {\n                throw new Error(\"Binding definitions on scope and controller at the same time is not supported.\");\n            }\n            var context = (btcIsObject) ? directive.bindToController : directive.scope;\n            var bindings = new Bindings();\n            if (typeof context == 'object') {\n                Object.keys(context).forEach(function (propName) {\n                    var definition = context[propName];\n                    var bindingType = definition.charAt(0);\n                    // QUESTION: What about `=*`? Ignore? Throw? Support?\n                    switch (bindingType) {\n                        case '@':\n                        case '<':\n                            // We don't need to do anything special. They will be defined as inputs on the\n                            // upgraded component facade and the change propagation will be handled by\n                            // `ngOnChanges()`.\n                            break;\n                        case '=':\n                            bindings.twoWayBoundProperties.push(propName);\n                            bindings.twoWayBoundLastValues.push(INITIAL_VALUE$1);\n                            bindings.propertyToOutputMap[propName] = propName + 'Change';\n                            break;\n                        case '&':\n                            bindings.expressionBoundProperties.push(propName);\n                            bindings.propertyToOutputMap[propName] = propName;\n                            break;\n                        default:\n                            var json = JSON.stringify(context);\n                            throw new Error(\"Unexpected mapping '\" + bindingType + \"' in '\" + json + \"' in '\" + _this.name + \"' directive.\");\n                    }\n                });\n            }\n            return bindings;\n        };\n        UpgradeComponent.prototype.initializeOutputs = function () {\n            var _this = this;\n            // Initialize the outputs for `=` and `&` bindings\n            this.bindings.twoWayBoundProperties.concat(this.bindings.expressionBoundProperties)\n                .forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                _this[outputName] = new core.EventEmitter();\n            });\n        };\n        UpgradeComponent.prototype.bindOutputs = function () {\n            var _this = this;\n            // Bind `&` bindings to the corresponding outputs\n            this.bindings.expressionBoundProperties.forEach(function (propName) {\n                var outputName = _this.bindings.propertyToOutputMap[propName];\n                var emitter = _this[outputName];\n                _this.bindingDestination[propName] = function (value) { return emitter.emit(value); };\n            });\n        };\n        UpgradeComponent.prototype.forwardChanges = function (changes) {\n            var _this = this;\n            // Forward input changes to `bindingDestination`\n            Object.keys(changes).forEach(function (propName) { return _this.bindingDestination[propName] = changes[propName].currentValue; });\n            if (isFunction(this.bindingDestination.$onChanges)) {\n                this.bindingDestination.$onChanges(changes);\n            }\n        };\n        return UpgradeComponent;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * @description\n     *\n     * An `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * *Part of the [upgrade/static](api?query=upgrade/static)\n     * library for hybrid upgrade apps that support AoT compilation*\n     *\n     * The `upgrade/static` package contains helpers that allow AngularJS and Angular components\n     * to be used together inside a hybrid upgrade application, which supports AoT compilation.\n     *\n     * Specifically, the classes and functions in the `upgrade/static` module allow the following:\n     *\n     * 1. Creation of an Angular directive that wraps and exposes an AngularJS component so\n     *    that it can be used in an Angular template. See `UpgradeComponent`.\n     * 2. Creation of an AngularJS directive that wraps and exposes an Angular component so\n     *    that it can be used in an AngularJS template. See `downgradeComponent`.\n     * 3. Creation of an Angular root injector provider that wraps and exposes an AngularJS\n     *    service so that it can be injected into an Angular context. See\n     *    {@link UpgradeModule#upgrading-an-angular-1-service Upgrading an AngularJS service} below.\n     * 4. Creation of an AngularJS service that wraps and exposes an Angular injectable\n     *    so that it can be injected into an AngularJS context. See `downgradeInjectable`.\n     * 3. Bootstrapping of a hybrid Angular application which contains both of the frameworks\n     *    coexisting in a single application.\n     *\n     * @usageNotes\n     *\n     * ```ts\n     * import {UpgradeModule} from '@angular/upgrade/static';\n     * ```\n     *\n     * See also the {@link UpgradeModule#examples examples} below.\n     *\n     * ### Mental Model\n     *\n     * When reasoning about how a hybrid application works it is useful to have a mental model which\n     * describes what is happening and explains what is happening at the lowest level.\n     *\n     * 1. There are two independent frameworks running in a single application, each framework treats\n     *    the other as a black box.\n     * 2. Each DOM element on the page is owned exactly by one framework. Whichever framework\n     *    instantiated the element is the owner. Each framework only updates/interacts with its own\n     *    DOM elements and ignores others.\n     * 3. AngularJS directives always execute inside the AngularJS framework codebase regardless of\n     *    where they are instantiated.\n     * 4. Angular components always execute inside the Angular framework codebase regardless of\n     *    where they are instantiated.\n     * 5. An AngularJS component can be \"upgraded\"\" to an Angular component. This is achieved by\n     *    defining an Angular directive, which bootstraps the AngularJS component at its location\n     *    in the DOM. See `UpgradeComponent`.\n     * 6. An Angular component can be \"downgraded\" to an AngularJS component. This is achieved by\n     *    defining an AngularJS directive, which bootstraps the Angular component at its location\n     *    in the DOM. See `downgradeComponent`.\n     * 7. Whenever an \"upgraded\"/\"downgraded\" component is instantiated the host element is owned by\n     *    the framework doing the instantiation. The other framework then instantiates and owns the\n     *    view for that component.\n     *    1. This implies that the component bindings will always follow the semantics of the\n     *       instantiation framework.\n     *    2. The DOM attributes are parsed by the framework that owns the current template. So\n     *       attributes in AngularJS templates must use kebab-case, while AngularJS templates must use\n     *       camelCase.\n     *    3. However the template binding syntax will always use the Angular style, e.g. square\n     *       brackets (`[...]`) for property binding.\n     * 8. Angular is bootstrapped first; AngularJS is bootstrapped second. AngularJS always owns the\n     *    root component of the application.\n     * 9. The new application is running in an Angular zone, and therefore it no longer needs calls to\n     *    `$apply()`.\n     *\n     * ### The `UpgradeModule` class\n     *\n     * This class is an `NgModule`, which you import to provide AngularJS core services,\n     * and has an instance method used to bootstrap the hybrid upgrade application.\n     *\n     * * Core AngularJS services\n     *   Importing this `NgModule` will add providers for the core\n     *   [AngularJS services](https://docs.angularjs.org/api/ng/service) to the root injector.\n     *\n     * * Bootstrap\n     *   The runtime instance of this class contains a {@link UpgradeModule#bootstrap `bootstrap()`}\n     *   method, which you use to bootstrap the top level AngularJS module onto an element in the\n     *   DOM for the hybrid upgrade app.\n     *\n     *   It also contains properties to access the {@link UpgradeModule#injector root injector}, the\n     *   bootstrap `NgZone` and the\n     *   [AngularJS $injector](https://docs.angularjs.org/api/auto/service/$injector).\n     *\n     * ### Examples\n     *\n     * Import the `UpgradeModule` into your top level {@link NgModule Angular `NgModule`}.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='ng2-module'}\n     *\n     * Then inject `UpgradeModule` into your Angular `NgModule` and use it to bootstrap the top level\n     * [AngularJS module](https://docs.angularjs.org/api/ng/type/angular.Module) in the\n     * `ngDoBootstrap()` method.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng1'}\n     *\n     * Finally, kick off the whole process, by bootstraping your top level Angular `NgModule`.\n     *\n     * {@example upgrade/static/ts/full/module.ts region='bootstrap-ng2'}\n     *\n     * {@a upgrading-an-angular-1-service}\n     * ### Upgrading an AngularJS service\n     *\n     * There is no specific API for upgrading an AngularJS service. Instead you should just follow the\n     * following recipe:\n     *\n     * Let's say you have an AngularJS service:\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"ng1-text-formatter-service\"}\n     *\n     * Then you should define an Angular provider to be included in your `NgModule` `providers`\n     * property.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"upgrade-ng1-service\"}\n     *\n     * Then you can use the \"upgraded\" AngularJS service by injecting it into an Angular component\n     * or service.\n     *\n     * {@example upgrade/static/ts/full/module.ts region=\"use-ng1-upgraded-service\"}\n     *\n     * @publicApi\n     */\n    var UpgradeModule = /** @class */ (function () {\n        function UpgradeModule(\n        /** The root `Injector` for the upgrade application. */\n        injector, \n        /** The bootstrap zone for the upgrade application */\n        ngZone) {\n            this.ngZone = ngZone;\n            this.injector = new NgAdapterInjector(injector);\n        }\n        /**\n         * Bootstrap an AngularJS application from this NgModule\n         * @param element the element on which to bootstrap the AngularJS application\n         * @param [modules] the AngularJS modules to bootstrap for this application\n         * @param [config] optional extra AngularJS bootstrap configuration\n         */\n        UpgradeModule.prototype.bootstrap = function (element$1, modules, config /*angular.IAngularBootstrapConfig*/) {\n            var _this = this;\n            if (modules === void 0) { modules = []; }\n            var INIT_MODULE_NAME = UPGRADE_MODULE_NAME + '.init';\n            // Create an ng1 module to bootstrap\n            var initModule = module_(INIT_MODULE_NAME, [])\n                .constant(UPGRADE_APP_TYPE_KEY, 2 /* Static */)\n                .value(INJECTOR_KEY, this.injector)\n                .factory(LAZY_MODULE_REF, [INJECTOR_KEY, function (injector) { return ({ injector: injector }); }])\n                .config([\n                $PROVIDE, $INJECTOR,\n                function ($provide, $injector) {\n                    if ($injector.has($$TESTABILITY)) {\n                        $provide.decorator($$TESTABILITY, [\n                            $DELEGATE,\n                            function (testabilityDelegate) {\n                                var originalWhenStable = testabilityDelegate.whenStable;\n                                var injector = _this.injector;\n                                // Cannot use arrow function below because we need the context\n                                var newWhenStable = function (callback) {\n                                    originalWhenStable.call(testabilityDelegate, function () {\n                                        var ng2Testability = injector.get(core.Testability);\n                                        if (ng2Testability.isStable()) {\n                                            callback();\n                                        }\n                                        else {\n                                            ng2Testability.whenStable(newWhenStable.bind(testabilityDelegate, callback));\n                                        }\n                                    });\n                                };\n                                testabilityDelegate.whenStable = newWhenStable;\n                                return testabilityDelegate;\n                            }\n                        ]);\n                    }\n                    if ($injector.has($INTERVAL)) {\n                        $provide.decorator($INTERVAL, [\n                            $DELEGATE,\n                            function (intervalDelegate) {\n                                // Wrap the $interval service so that setInterval is called outside NgZone,\n                                // but the callback is still invoked within it. This is so that $interval\n                                // won't block stability, which preserves the behavior from AngularJS.\n                                var wrappedInterval = function (fn, delay, count, invokeApply) {\n                                    var pass = [];\n                                    for (var _i = 4; _i < arguments.length; _i++) {\n                                        pass[_i - 4] = arguments[_i];\n                                    }\n                                    return _this.ngZone.runOutsideAngular(function () {\n                                        return intervalDelegate.apply(void 0, __spread([function () {\n                                                var args = [];\n                                                for (var _i = 0; _i < arguments.length; _i++) {\n                                                    args[_i] = arguments[_i];\n                                                }\n                                                // Run callback in the next VM turn - $interval calls\n                                                // $rootScope.$apply, and running the callback in NgZone will\n                                                // cause a '$digest already in progress' error if it's in the\n                                                // same vm turn.\n                                                setTimeout(function () { _this.ngZone.run(function () { return fn.apply(void 0, __spread(args)); }); });\n                                            }, delay, count, invokeApply], pass));\n                                    });\n                                };\n                                wrappedInterval['cancel'] = intervalDelegate.cancel;\n                                return wrappedInterval;\n                            }\n                        ]);\n                    }\n                }\n            ])\n                .run([\n                $INJECTOR,\n                function ($injector) {\n                    _this.$injector = $injector;\n                    // Initialize the ng1 $injector provider\n                    setTempInjectorRef($injector);\n                    _this.injector.get($INJECTOR);\n                    // Put the injector on the DOM, so that it can be \"required\"\n                    element(element$1).data(controllerKey(INJECTOR_KEY), _this.injector);\n                    // Wire up the ng1 rootScope to run a digest cycle whenever the zone settles\n                    // We need to do this in the next tick so that we don't prevent the bootup\n                    // stabilizing\n                    setTimeout(function () {\n                        var $rootScope = $injector.get('$rootScope');\n                        var subscription = _this.ngZone.onMicrotaskEmpty.subscribe(function () {\n                            if ($rootScope.$$phase) {\n                                if (core.isDevMode()) {\n                                    console.warn('A digest was triggered while one was already in progress. This may mean that something is triggering digests outside the Angular zone.');\n                                }\n                                return $rootScope.$evalAsync();\n                            }\n                            return $rootScope.$digest();\n                        });\n                        $rootScope.$on('$destroy', function () { subscription.unsubscribe(); });\n                    }, 0);\n                }\n            ]);\n            var upgradeModule = module_(UPGRADE_MODULE_NAME, [INIT_MODULE_NAME].concat(modules));\n            // Make sure resumeBootstrap() only exists if the current bootstrap is deferred\n            var windowAngular = window['angular'];\n            windowAngular.resumeBootstrap = undefined;\n            // Bootstrap the AngularJS application inside our zone\n            this.ngZone.run(function () { bootstrap(element$1, [upgradeModule.name], config); });\n            // Patch resumeBootstrap() to run inside the ngZone\n            if (windowAngular.resumeBootstrap) {\n                var originalResumeBootstrap_1 = windowAngular.resumeBootstrap;\n                var ngZone_1 = this.ngZone;\n                windowAngular.resumeBootstrap = function () {\n                    var _this = this;\n                    var args = arguments;\n                    windowAngular.resumeBootstrap = originalResumeBootstrap_1;\n                    return ngZone_1.run(function () { return windowAngular.resumeBootstrap.apply(_this, args); });\n                };\n            }\n        };\n        UpgradeModule = __decorate([\n            core.NgModule({ providers: [angular1Providers] }),\n            __metadata(\"design:paramtypes\", [core.Injector,\n                core.NgZone])\n        ], UpgradeModule);\n        return UpgradeModule;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only re-exports items to appear in the public api. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵangular_packages_upgrade_static_static_e = angular1Providers;\n    exports.ɵangular_packages_upgrade_static_static_c = compileFactory;\n    exports.ɵangular_packages_upgrade_static_static_a = injectorFactory;\n    exports.ɵangular_packages_upgrade_static_static_d = parseFactory;\n    exports.ɵangular_packages_upgrade_static_static_b = rootScopeFactory;\n    exports.getAngularJSGlobal = getAngularJSGlobal;\n    exports.getAngularLib = getAngularLib;\n    exports.setAngularJSGlobal = setAngularJSGlobal;\n    exports.setAngularLib = setAngularLib;\n    exports.downgradeComponent = downgradeComponent;\n    exports.downgradeInjectable = downgradeInjectable;\n    exports.VERSION = VERSION;\n    exports.downgradeModule = downgradeModule;\n    exports.UpgradeComponent = UpgradeComponent;\n    exports.UpgradeModule = UpgradeModule;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=upgrade-static.umd.js.map\n"]}