

include /app/helpers/jade/mixins
include /app/configuration/mixins

mixin td-ellipses-lbl(w, lbl)
    td.td-ellipsis(width=`${w}` style=`min-width: ${w}; max-width: ${w}`)
        label #{lbl}

.modal--ignite.modal--wide.modal.modal-domain-import.center(role='dialog')
    -var tipOpts = {};
    - tipOpts.container = '.modal-content'
    - tipOpts.placement = 'right'
    .modal-dialog
        .modal-content(ignite-loading='importDomainFromCSV' ignite-loading-text='{{importDomain.loadingOptions.text}}')
            #errors-container.modal-header.header
                button.close(type='button' ng-click='$hide()' aria-hidden='true')
                    svg(ignite-icon="cross")
                h4.modal-title()
                    span(ng-if='!importDomain.demo') Import domain models from csv file
                    span(ng-if='importDomain.demo') Import domain models from demo csv file
            .modal-body()
                modal-import-models-step-indicator(
                    steps='$ctrl.actions'
                    current-step='importDomain.action'
                )                
                .import-domain-model-wizard-page(ng-if='importDomain.action == "connect" && !importDomain.demo')
                    form.pc-form-grid-row(name=form novalidate)
                        .pc-form-grid-col-60
                            .file-upload-container
                                input(type="file" on-change="$ctrl.onFileSelected($event)" accept=".csv,.zip")
                                                    
                        .pc-form-grid-col-60(ng-if='selectedPreset.samples')
                            +form-field__checkbox({
                                label: 'Include sample schemas',
                                model: 'selectedPreset.importSamples',
                                name: '"importSamples"',
                                tip: 'If selected, then sample tables metadata will be parsed if exist',
                                tipOpts
                            })
                        .pc-form-grid-col-60
                            +form-field__checkbox({
                                label: 'Tables only',
                                model: 'selectedPreset.tablesOnly',
                                name: '"tablesOnly"',
                                tip: 'If selected, then only tables metadata will be parsed<br>Otherwise table and view metadata will be parsed',
                                tipOpts
                            })

                .import-domain-model-wizard-page(ng-if='importDomain.action == "schemas"')
                    pc-items-table(
                        column-defs='::$ctrl.schemasColumnDefs'
                        items='importDomain.schemas'
                        hide-header='::true'
                        one-way-selection='::true'
                        selected-row-id='$ctrl.selectedSchemasIDs'
                        on-selection-change='$ctrl.onSchemaSelectionChange($event)'
                        row-identity-key='name'
                    )
                .import-domain-model-wizard-page(ng-if='importDomain.action == "tables"')
                    form.pc-form-grid-row(novalidate)
                        .pc-form-grid-col-30
                            +form-field__dropdown({
                                label: 'Action:',
                                model: 'importCommon.action',
                                options: 'importActions'
                            })
                        .pc-form-grid-col-30
                            +form-field__dropdown({
                                label: 'Cache:',
                                model: 'importCommon.cacheOrTemplate',
                                options: 'importCommon.cachesOrTemplates'
                            })(
                                ng-change='$ctrl.onCacheSelect(importCommon.cacheOrTemplate)'
                            )
                        .pc-form-grid-col-60.pc-form-grid__text-only-item
                            +form-field__label({ label: 'Defaults to be applied for filtered tables' })
                                +form-field__tooltip({ title: 'Select and apply options for caches generation' })
                            button.btn-ignite.btn-ignite--success(
                                type='button'
                                ng-click='applyDefaults()'
                                style='margin-left: auto'
                            ) Apply
                    pc-items-table(
                        column-defs='::$ctrl.tablesColumnDefs'
                        items='importDomain.tables'
                        hide-header='::true'
                        on-visible-rows-change='$ctrl.onVisibleRowsChange($event)'
                        one-way-selection='::true'
                        selected-row-id='$ctrl.selectedTablesIDs'
                        on-selection-change='$ctrl.onTableSelectionChange($event)'
                        row-identity-key='id'
                    )
                .import-domain-model-wizard-page(ng-show='importDomain.action == "options"')
                    -var form = 'optionsForm'
                    -var generatePojo = 'ui.generatePojo'

                    form.pc-form-grid-row(name=form novalidate)
                        .pc-form-grid-col-60
                            +form-field__checkbox({
                                label: 'Use Java built-in types for keys',
                                model: 'ui.builtinKeys',
                                name: '"domainBuiltinKeys"',
                                tip: 'Use Java built-in types like "Integer", "Long", "String" instead of POJO generation in case when table primary key contains only one field',
                                tipOpts
                            })
                        .pc-form-grid-col-60
                            +form-field__checkbox({
                                label: 'Use primitive types for NOT NULL table columns',
                                model: 'ui.usePrimitives',
                                name: '"domainUsePrimitives"',
                                tip: 'Use primitive types like "int", "long", "double" for POJOs fields generation in case of NOT NULL columns',
                                tipOpts
                            })
                        .pc-form-grid-col-60
                            +form-field__checkbox({
                                label: 'Generate query entity key fields',
                                model: 'ui.generateKeyFields',
                                name: '"generateKeyFields"',
                                tip: 'Generate key fields for query entity.<br\>\
                                We need this for the cases when no key-value classes\
                                are present on cluster nodes, and we need to build/modify keys and values during SQL DML operations.\
                                Thus, setting this parameter is not mandatory and should be based on particular use case.',
                                tipOpts
                            })
                        .pc-form-grid-col-60
                            +form-field__checkbox({
                                label: 'Generate POJO classes',
                                model: generatePojo,
                                name: '"domainGeneratePojo"',
                                tip: 'If selected then POJO classes will be generated from database tables',
                                tipOpts
                            })
                        .pc-form-grid-col-60(ng-if=generatePojo)
                            +form-field__checkbox({
                                label: 'Generate aliases for query entity',
                                model: 'ui.generateTypeAliases',
                                name: '"domainGenerateTypeAliases"',
                                tip: 'Generate aliases for query entity if table name is invalid Java identifier',
                                tipOpts
                            })
                        .pc-form-grid-col-60(ng-if=generatePojo)
                            +form-field__checkbox({
                                label: 'Generate aliases for query fields',
                                model: 'ui.generateFieldAliases',
                                name: '"domainGenerateFieldAliases"',
                                tip: 'Generate aliases for query fields with database field names when database field name differ from Java field name',
                                tipOpts
                            })
                        .pc-form-grid-col-60(ng-if=generatePojo)
                            +form-field__java-package({
                                label: 'Package:',
                                model: 'ui.packageName',
                                name: '"domainPackageName"',
                                required: true,
                                tip: 'Package that will be used for POJOs generation',
                                tipOpts
                            })

            .modal-footer()
                button.btn-ignite.btn-ignite--success.modal-import-models__prev-button(
                    type='button'
                    ng-hide='importDomain.action == "drivers" || importDomain.action == "connect"'
                    ng-click='importDomainPrev()'
                    b_s-tooltip=''
                    d_ata-title='{{prevTooltipText()}}'
                    d_ata-placement='bottom'
                ) Prev
                selected-items-amount-indicator(
                    ng-if='$ctrl.$scope.importDomain.action === "schemas"'
                    selected-amount='$ctrl.selectedSchemasIDs.length'
                    total-amount='$ctrl.$scope.importDomain.schemas.length'
                )
                selected-items-amount-indicator(
                    ng-if='$ctrl.$scope.importDomain.action === "tables"'
                    selected-amount='$ctrl.selectedTablesIDs.length'
                    total-amount='$ctrl.$scope.importDomain.tables.length'
                )
                button.btn-ignite.btn-ignite--success.modal-import-models__next-button(
                    type='button'
                    ng-click='importDomainNext(optionsForm)'
                    ng-disabled='!importDomainNextAvailable()'
                    b_s-tooltip=''
                    d_ata-title='{{nextTooltipText()}}'
                    d_ata-placement='bottom'
                )
                    svg.icon-left(ignite-icon='checkmark' ng-show='importDomain.button === "Save"')
                    | {{importDomain.button}}

                button.btn-ignite.btn-ignite--success.modal-import-models__next-button(ng-click='$ctrl.onHide()') Cancel
