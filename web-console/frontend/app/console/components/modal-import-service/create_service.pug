

include /app/helpers/jade/mixins
include /app/configuration/mixins

-var form = '$ctrl.form'
-var item = '$ctrl.serviceConfiguration'
-var items = '$ctrl.cluster.serviceConfigurations'

form.pc-form-grid-row(name=form novalidate)
    .pca-form-row()         
        .ignite-form-field()
            +form-field__label({ label: 'Service configuration:', name: '"serviceConfiguration"' })
            
            .pc-form-grid-row
                .pc-form-grid-col-60
                    +form-field__text({
                        label: 'Name:',
                        model: `${item}.name`,
                        name: '"serviceName"',
                        required: true,
                        placeholder: 'Input service name'
                    })(
                        ui-validate=`{
                            uniqueName: '$ctrl.Clusters.serviceConfigurations.serviceConfiguration.name.customValidators.uniqueName(${item}, ${items})'
                        }`
                        ui-validate-watch=`"${items}"`
                        ui-validate-watch-object-equality='true'
                        ng-model-options='{allowInvalid: true}'                        
                    )
                        +form-field__error({ error: 'uniqueName', message: 'Service with that name is already configured' })
                .pc-form-grid-col-60
                    +form-field__java-class({
                        label: 'Service class',
                        model: `${item}.service`,
                        name: '"serviceService"',
                        required: 'true',
                        tip: 'Service implementation class name'
                    })
                .pc-form-grid-col-60
                    +form-field__number({
                        label: 'Max per node count:',
                        model: `${item}.maxPerNodeCount`,
                        name: '"ServiceMaxPerNodeCount"',
                        placeholder: 'Unlimited',
                        min: '0',
                        tip: 'Maximum number of deployed service instances on each node.<br/>\
                                Zero for unlimited'
                    })
                .pc-form-grid-col-60
                    +form-field__number({
                        label: 'Total count:',
                        model: `${item}.totalCount`,
                        name: '"serviceTotalCount"',
                        placeholder: 'Unlimited',
                        min: '0',
                        tip: 'Total number of deployed service instances in the cluster.<br/>\
                            Zero for unlimited'
                    })
                .pc-form-grid-col-60
                    +form-field__dropdown({
                        label: 'Cache:',
                        model: `${item}.cache`,
                        name: '"serviceCache"',
                        placeholder: 'Key-affinity not used',
                        placeholderEmpty: 'No caches configured for current cluster',
                        options: '$ctrl.servicesCachesMenu',
                        tip: 'Cache name used for key-to-node affinity calculation'
                    })(
                        pc-is-in-collection='$ctrl.cluster.caches'
                    )
                        +form-field__error({ error: 'isInCollection', message: `Cluster doesn't have such a cache` })
                .pc-form-grid-col-60
                    +form-field__text({
                        label: 'Affinity key:',
                        model: `${item}.affinityKey`,
                        name: '"serviceAffinityKey"',
                        placeholder: 'Input affinity key',
                        tip: 'Affinity key used for key-to-node affinity calculation'
                    }) 
                     


