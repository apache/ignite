

-var form = 'communication'
-var communication = model + '.communication'

panel-collapsible(ng-form=form on-open=`ui.loadPanel('${form}')`)
    panel-title Communication  
    panel-description 
        | Configuration of communication with other nodes by TCP/IP.  
    panel-content.pca-form-row(ng-if=`ui.isPanelLoaded('${form}')`)
        .pca-form-column-12.pc-form-grid-row            
            .pc-form-grid-col-30
                +form-field__ip-address({
                    label: 'Local IP address:',
                    model: `${communication}.localAddress`,
                    name: '"comLocalAddress"',
                    enabled: 'true',
                    placeholder: '0.0.0.0',
                    tip: 'Local host address for socket binding<br/>\
                         If not specified use all available addres on local host'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Local port:',
                    model: `${communication}.localPort`,
                    name: '"comLocalPort"',
                    placeholder: '47100',
                    min: '1024',
                    max: '65535',
                    tip: 'Local port for socket binding'
                })              
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Idle connection timeout:',
                    model: `${communication}.idleConnectionTimeout`,
                    name: '"idleConnectionTimeout"',
                    placeholder: '30000',
                    min: '1',
                    tip: 'Maximum idle connection timeout upon which a connection to client will be closed'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Connect timeout:',
                    model: `${communication}.connectTimeout`,
                    name: '"connectTimeout"',
                    placeholder: '5000',
                    min: '0',
                    tip: 'Connect timeout used when establishing connection with remote nodes'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Max. connect timeout:',
                    model: `${communication}.maxConnectTimeout`,
                    name: '"maxConnectTimeout"',
                    placeholder: '600000',
                    min: '0',
                    tip: 'Maximum connect timeout'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Reconnect count:',
                    model: `${communication}.reconnectCount`,
                    name: '"comReconnectCount"',
                    placeholder: '10',
                    min: '1',
                    tip: 'Maximum number of reconnect attempts used when establishing connection with remote nodes'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Socket send buffer:',
                    model: `${communication}.socketSendBuffer`,
                    name: '"socketSendBuffer"',
                    placeholder: '32768',
                    min: '0',
                    tip: 'Send buffer size for sockets created or accepted by this SPI'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Socket receive buffer:',
                    model: `${communication}.socketReceiveBuffer`,
                    name: '"socketReceiveBuffer"',
                    placeholder: '32768',
                    min: '0',
                    tip: 'Receive buffer size for sockets created or accepted by this SPI'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Slow client queue limit:',
                    model: `${communication}.slowClientQueueLimit`,
                    name: '"slowClientQueueLimit"',
                    placeholder: '0',
                    min: '0',
                    tip: 'Slow client queue limit'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Ack send threshold:',
                    model: `${communication}.ackSendThreshold`,
                    name: '"ackSendThreshold"',
                    placeholder: '{{ ::$ctrl.Clusters.ackSendThreshold.default }}',
                    min: '{{ ::$ctrl.Clusters.ackSendThreshold.min }}',
                    tip: 'Number of received messages per connection to node after which acknowledgment message is sent'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Message queue limit:',
                    model: `${communication}.messageQueueLimit`,
                    name: '"messageQueueLimit"',
                    placeholder: '{{ ::$ctrl.Clusters.messageQueueLimit.default }}',
                    min: '{{ ::$ctrl.Clusters.messageQueueLimit.min }}',
                    tip: 'Message queue limit for incoming and outgoing messages'
                })            
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Socket write timeout:',
                    model: `${communication}.socketWriteTimeout`,
                    name: '"socketWriteTimeout"',
                    placeholder: '2000',
                    min: '0',
                    tip: 'Socket write timeout'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Selectors count:',
                    model: `${communication}.selectorsCount`,
                    name: '"selectorsCount"',
                    placeholder: 'min(4, availableProcessors)',
                    min: '1',
                    tip: 'Count of selectors te be used in TCP server'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Selectors spins:',
                    model: `${communication}.selectorSpins`,
                    name: '"selectorSpins"',
                    placeholder: '0',
                    min: '0',
                    tip: 'Defines how many non-blocking selector.selectNow() should be made before falling into selector.select(long) in NIO server'
                })
            .pc-form-grid-col-30
                +form-field__number({
                    label: 'Connections per node:',
                    model: `${communication}.connectionsPerNode`,
                    name: '"connectionsPerNode"',
                    placeholder: '1',
                    min: '1',
                    tip: 'Number of connections to each remote node'
                })
            .pc-form-grid-col-60
                +form-field__java-class({
                    label: 'Address resolver:',
                    model: `${communication}.addressResolver`,
                    name: '"comAddressResolver"',
                    tip: 'Provides resolution between external and internal addresses'
                })
            .pc-form-grid-col-60
                +form-field__checkbox({
                    label: 'Direct buffer',
                    model: `${communication}.directBuffer`,
                    name: '"directBuffer"',
                    tip: 'If value is true, then SPI will use ByteBuffer.allocateDirect(int) call<br/>\
                          Otherwise, SPI will use ByteBuffer.allocate(int) call'
                })
            .pc-form-grid-col-60
                +form-field__checkbox({
                    label: 'Direct send buffer',
                    model: `${communication}.directSendBuffer`,
                    name: '"directSendBuffer"',
                    tip: 'Flag defining whether direct send buffer should be used'
                })
            .pc-form-grid-col-60
                +form-field__checkbox({
                    label: 'TCP_NODELAY option',
                    model: `${communication}.tcpNoDelay`,
                    name: '"tcpNoDelay"',
                    tip: 'Value for TCP_NODELAY socket option'
                })
            .pc-form-grid-col-60
                +form-field__checkbox({
                    label: 'Use paired connections',
                    model: `${communication}.usePairedConnections`,
                    name: '"usePairedConnections"',
                    tip: 'Maintain connection for outgoing and incoming messages separately'
                })
            .pc-form-grid-col-60
                +form-field__checkbox({
                    label: 'Filter reachable addresses',
                    model: `${communication}.filterReachableAddresses`,
                    name: '"filterReachableAddresses"',
                    tip: 'Filter for reachable addresses on creating tcp client'
                })

